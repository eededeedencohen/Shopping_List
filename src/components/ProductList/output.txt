AlternativeProductsModal.js:

// src/components/ProductList/AlternativeProductsModal.js

import React, { useState, useEffect } from "react";
import Modal from "../Cart/Modal"; 
import { getAlternativeProductsDetails } from "../../network/alternative-productsService";
import Image from "./Images"; 
// ^ אם Images.js נמצא באותה תיקייה. 
// אם הוא במקום אחר, למשל "../Images", שנה בהתאם.

/**
 * קומפוננטת מודאל המציגה מידע על מוצרים חלופיים
 * @param {boolean} isOpen - האם המודאל פתוח
 * @param {function} onClose - פונקציית סגירת המודאל
 * @param {string[]} barcodes - מערך ברקודים של המוצרים החלופיים
 */
const AlternativeProductsModal = ({ isOpen, onClose, barcodes }) => {
  const [products, setProducts] = useState([]);

  useEffect(() => {
    const loadProducts = async () => {
      try {
        // אם אין ברקודים => ננקה את המערך
        if (!barcodes || barcodes.length === 0) {
          setProducts([]);
          return;
        }

        // שליחה ל-API (ב-POST) כדי לקבל את המוצרים
        const response = await getAlternativeProductsDetails(barcodes);

        // לפי המבנה שאתה מקבל:
        // {
        //   "status": "success",
        //   "results": 3,
        //   "data": {
        //     "products": [...]
        //   }
        // }
        // שים לב: המוצרים נמצאים ב- response.data.products
        setProducts(response.data.products || []);
      } catch (error) {
        console.error("Error fetching alternative products details:", error);
        setProducts([]);
      }
    };

    // נקרא לפונקציה רק אם המודאל פתוח
    if (isOpen) {
      loadProducts();
    }
  }, [isOpen, barcodes]);

  // אם המודאל לא פתוח, לא מציגים כלום (ליתר ביטחון)
  if (!isOpen) return null;

  return (
    <Modal isOpen={isOpen} onClose={onClose}>
      <h2>מוצרים חלופיים</h2>

      {products.length === 0 ? (
        <p>אין מוצרים חלופיים להציג.</p>
      ) : (
        <div style={{ maxHeight: "400px", overflowY: "auto" }}>
          {products.map((prod) => (
            <div
              key={prod._id}
              style={{
                border: "1px solid #ccc",
                margin: "0.5rem 0",
                padding: "0.5rem",
              }}
            >
              {/* תמונת המוצר - בהתבסס על הברקוד */}
              <div
                style={{
                  width: "80px",
                  height: "80px",
                  position: "relative",
                  marginBottom: "0.5rem",
                }}
              >
                <Image barcode={prod.barcode} />
              </div>

              {/* שדות נוספים לפי הנתונים שלך */}
              <h3>{prod.name}</h3>
              <p>ברקוד: {prod.barcode}</p>
              <p>מותג: {prod.brand}</p>
              <p>
                משקל: {prod.weight} {prod.unitWeight}
              </p>
              <p>
                קטגוריה: {prod.category} / {prod.subcategory}
              </p>
              {/* אם יש מחיר, אפשר להוסיף כאן */}
            </div>
          ))}
        </div>
      )}
    </Modal>
  );
};

export default AlternativeProductsModal;



CategoryNavigation.js:

// import React, { useEffect, useRef } from 'react';
// import './CategoryNavigation.css'; 
// import { useProducts } from '../../context/ProductContext';

// const CategoryNavigation = () => {
//   const { allCategories, activeCategory, setActiveCategory } = useProducts();
//   const navigationRef = useRef(null);

//   const handleTopicClick = (index) => {
//     setActiveCategory(allCategories[index]);
//     scrollToTopic(index);
//   };

//   const scrollToTopic = (index) => {
//     const topicElement = navigationRef.current.children[index];
//     if (topicElement) {
//       const containerWidth = navigationRef.current.clientWidth;
//       const scrollX = topicElement.offsetLeft - (containerWidth / 2 - topicElement.clientWidth / 2);
//       navigationRef.current.scrollTo({ left: scrollX, behavior: 'smooth' });
//     }
//   };

//   useEffect(() => {
//     // Scroll to the active category when it changes
//     const activeIndex = allCategories.indexOf(activeCategory);
//     if (activeIndex !== -1) {
//       scrollToTopic(activeIndex);
//     }
//   }, [activeCategory, allCategories]);

//   return (
//     <div className="mobile-navigation" ref={navigationRef}>
//       {allCategories.map((topic, index) => (
//         <div
//           key={index}
//           className={`navigation-topic ${allCategories[index] === activeCategory ? 'active-topic' : ''}`}
//           onClick={() => handleTopicClick(index)}
//         >
//           {topic}
//           {allCategories[index] === activeCategory && <div className="navigation-topic-underline"></div>}
//         </div>
//       ))}
//     </div>
//   );
// };

// export default CategoryNavigation;

//========================================================================
//========================================================================
import React, { useEffect, useRef } from 'react';
import './CategoryNavigation.css'; 
import { useProducts } from '../../context/ProductContext';

const CategoryNavigation = () => {
  const {
    allCategories,
    activeCategoryIndex,
    setActiveCategoryIndex,
    setActiveSubCategoryIndex,
  } = useProducts();

  const navigationRef = useRef(null);

  /**
   * כשמשתמש לוחץ על קטגוריה - נעבור לקטגוריה (index) הזה, ואנחנו מאפסים את הסאב-קטגוריה ל-0
   */
  const handleTopicClick = (index) => {
    setActiveCategoryIndex(index);
    setActiveSubCategoryIndex(0);
    scrollToTopic(index);
  };

  /**
   * גלילה אנימטיבית של ה־scroll של הרשימה עד שהקטגוריה תהיה במרכז
   */
  const scrollToTopic = (index) => {
    if (!navigationRef.current) return;
    const topicElement = navigationRef.current.children[index];
    if (topicElement) {
      const containerWidth = navigationRef.current.clientWidth;
      const scrollX =
        topicElement.offsetLeft - (containerWidth / 2 - topicElement.clientWidth / 2);
      navigationRef.current.scrollTo({ left: scrollX, behavior: 'smooth' });
    }
  };

  useEffect(() => {
    // בכל פעם שהקטגוריה הפעילה משתנה, לגלול אליה
    scrollToTopic(activeCategoryIndex);
  }, [activeCategoryIndex]);

  return (
    <div className="mobile-navigation" ref={navigationRef}>
      {allCategories.map((topic, index) => (
        <div
          key={index}
          className={`navigation-topic ${index === activeCategoryIndex ? 'active-topic' : ''}`}
          onClick={() => handleTopicClick(index)}
        >
          {topic}
          {index === activeCategoryIndex && <div className="navigation-topic-underline"></div>}
        </div>
      ))}
    </div>
  );
};

export default CategoryNavigation;



EditProducts.js:

// // // src/components/EditProducts.js

// // import React, { useEffect, useState, useRef } from "react";
// // import {
// //   getAllProducts,
// //   createProduct,
// //   updateProductById,
// //   updateProductsByBarcode,
// //   deleteProductById,
// // } from "../../network/editProductsService";

// // import CategoryNavigation from "./CategoryNavigation";
// // import SubCategoryNavigation from "./SubCategoryNavigation";
// // import Image from "./Images";

// // // // מודאלים
// // // import ModalAddProduct from "./modals/ModalAddProduct";
// // // import ModalSingleEdit from "./modals/ModalSingleEdit";
// // // import ModalBulkEdit from "./modals/ModalBulkEdit";

// // // ה־CSS
// // // import "./ManageProducts.css";

// // import {
// //   getAllAlternativeProductsGroups,
// //   getAlternativeProductsGroupsByBarcode,
// //   createAlternativeProductsGroups,
// //   updateAlternativeProductsGroupsByBarcode,
// // } from "../../network/alternativeProductsGroupsService";

// // import { useProducts } from "../../context/ProductContext";

// // import ModalAddProduct from "./modals/ModalAddProduct";
// // import ModalBulkEdit from "./modals/ModalBulkEdit";
// // import ModalGlobalEdit from "./modals/ModalGlobalEdit";
// // import ModalSingleEdit from "./modals/ModalSingleEdit";





// // // CSS
// // import "./ManageProducts.css";

// // /* -----------------------------------------------------------------
// //    פונקציות עזר
// // ------------------------------------------------------------------ */
// // function findApgByBarcode(apgData, barcode) {
// //   return apgData.find((item) => item.barcode === barcode);
// // }

// // function getGroupsForBarcode(apgData, barcode) {
// //   const apg = findApgByBarcode(apgData, barcode);
// //   return apg ? apg.groups : [];
// // }

// // function addNewGroup(apgData, barcodeA, newGroupName) {
// //   const newData = JSON.parse(JSON.stringify(apgData));
// //   let apg = newData.find((item) => item.barcode === barcodeA);
// //   if (!apg) {
// //     newData.push({
// //       barcode: barcodeA,
// //       groups: [{ groupName: newGroupName, barcodes: [] }],
// //     });
// //     return newData;
// //   }
// //   const exists = apg.groups.find((g) => g.groupName === newGroupName);
// //   if (!exists) {
// //     apg.groups.push({ groupName: newGroupName, barcodes: [] });
// //   }
// //   return newData;
// // }

// // function addProductToGroup(apgData, barcodeA, groupName, barcodeB) {
// //   const newData = JSON.parse(JSON.stringify(apgData));
// //   const apgA = newData.find((item) => item.barcode === barcodeA);
// //   if (!apgA) return newData;
// //   const group = apgA.groups.find((g) => g.groupName === groupName);
// //   if (!group) return newData;

// //   if (!group.barcodes.includes(barcodeB)) {
// //     group.barcodes.push(barcodeB);
// //   }
// //   return newData;
// // }

// // function removeProductFromGroup(apgData, barcodeA, groupName, barcodeB) {
// //   const newData = JSON.parse(JSON.stringify(apgData));
// //   const apgA = newData.find((item) => item.barcode === barcodeA);
// //   if (!apgA) return newData;
// //   const group = apgA.groups.find((g) => g.groupName === groupName);
// //   if (!group) return newData;

// //   group.barcodes = group.barcodes.filter((b) => b !== barcodeB);
// //   return newData;
// // }

// // // העתקת כל הקבוצות ממוצר B ל-A
// // function copyAllGroupsFromBtoA(apgData, barcodeB, barcodeA) {
// //   const newData = JSON.parse(JSON.stringify(apgData));
// //   const apgB = findApgByBarcode(newData, barcodeB);
// //   if (!apgB) return newData;

// //   let apgA = findApgByBarcode(newData, barcodeA);
// //   if (!apgA) {
// //     newData.push({ barcode: barcodeA, groups: [] });
// //     apgA = findApgByBarcode(newData, barcodeA);
// //   }

// //   apgB.groups.forEach((groupOfB) => {
// //     const existing = apgA.groups.find(
// //       (g) => g.groupName === groupOfB.groupName
// //     );
// //     if (!existing) {
// //       apgA.groups.push({
// //         groupName: groupOfB.groupName,
// //         barcodes: [...groupOfB.barcodes],
// //       });
// //     } else {
// //       const setBarcodes = new Set([...existing.barcodes, ...groupOfB.barcodes]);
// //       existing.barcodes = Array.from(setBarcodes);
// //     }
// //   });

// //   return newData;
// // }

// // // העתקת קבוצה יחידה
// // function copySingleGroupFromBtoA(apgData, barcodeB, groupName, barcodeA) {
// //   const newData = JSON.parse(JSON.stringify(apgData));
// //   const apgB = findApgByBarcode(newData, barcodeB);
// //   if (!apgB) return newData;

// //   const groupB = apgB.groups.find((g) => g.groupName === groupName);
// //   if (!groupB) return newData;

// //   let apgA = findApgByBarcode(newData, barcodeA);
// //   if (!apgA) {
// //     newData.push({ barcode: barcodeA, groups: [] });
// //     apgA = findApgByBarcode(newData, barcodeA);
// //   }

// //   const existingGroup = apgA.groups.find((g) => g.groupName === groupName);
// //   if (!existingGroup) {
// //     apgA.groups.push({
// //       groupName,
// //       barcodes: [...groupB.barcodes],
// //     });
// //   } else {
// //     const setBarcodes = new Set([
// //       ...existingGroup.barcodes,
// //       ...groupB.barcodes,
// //     ]);
// //     existingGroup.barcodes = Array.from(setBarcodes);
// //   }

// //   return newData;
// // }

// // // פונקציה עזר להמרת יחידת משקל (אם תרצה להציג)
// // function convertWeightUnit(unit) {
// //   if (!unit) return "";
// //   switch (unit.toLowerCase()) {
// //     case "g":
// //       return "גרם";
// //     case "kg":
// //       return 'ק"ג';
// //     case "ml":
// //       return 'מ"ל';
// //     case "l":
// //       return "ליטר";
// //     default:
// //       return unit;
// //   }
// // }

// // // -------------------------------------------------------------
// // // הקומפוננטה הראשית
// // // -------------------------------------------------------------
// // function ProductListManagerAlternativeProductsGroups() {
// //   const {
// //     products,
// //     allCategories,
// //     all_sub_categories,
// //     activeCategoryIndex,
// //     setActiveCategoryIndex,
// //     activeSubCategoryIndex,
// //     setActiveSubCategoryIndex,
// //   } = useProducts();

// //   // שמירת apgData מהשרת
// //   const [apgData, setApgData] = useState([]);

// //   // מצבי עבודה
// //   const [mode, setMode] = useState("initial"); // 'initial' | 'editGroup' | 'copyAPG'
// //   const [activeA, setActiveA] = useState(null);
// //   const [activeGroupName, setActiveGroupName] = useState(null);

// //   // מודאלים
// //   const [showAPGGroupsModal, setShowAPGGroupsModal] = useState(false);
// //   const [showShowGroupsModal, setShowShowGroupsModal] = useState(false);
// //   const [showCopyGroupsModal, setShowCopyGroupsModal] = useState(false);

// //   // מקור לעתקת קבוצה B->A
// //   const [copySourceBarcodeB, setCopySourceBarcodeB] = useState(null);

// //   // -------------------------------------------------------------
// //   // טוען מהשרת את כל ה-APG בעת טעינת הקומפוננטה
// //   // -------------------------------------------------------------
// //   useEffect(() => {
// //     const fetchAPG = async () => {
// //       try {
// //         const res = await getAllAlternativeProductsGroups();
// //         setApgData(res?.data?.allGroups || []);
// //       } catch (err) {
// //         console.error("Error loading APG data:", err);
// //       }
// //     };
// //     fetchAPG();
// //   }, []);

// //   // -------------------------------------------------------------
// //   // 1) יצירת / עריכת APG
// //   // -------------------------------------------------------------
// //   const handleCreateEditAPG = (barcodeA) => {
// //     setActiveA(barcodeA);
// //     setMode("initial");
// //     setShowAPGGroupsModal(true);
// //   };

// //   const handleGroupSelected = (groupName) => {
// //     setActiveGroupName(groupName);
// //     setShowAPGGroupsModal(false);
// //     setMode("editGroup");
// //   };

// //   // -------------------------------------------------------------
// //   // 2) מצב editGroup: הוספת / הסרת מוצרים
// //   // -------------------------------------------------------------
// //   const handleAddToGroup = (barcodeB) => {
// //     const newApg = addProductToGroup(
// //       apgData,
// //       activeA,
// //       activeGroupName,
// //       barcodeB
// //     );
// //     setApgData(newApg);
// //   };

// //   const handleRemoveFromGroup = (barcodeB) => {
// //     const newApg = removeProductFromGroup(
// //       apgData,
// //       activeA,
// //       activeGroupName,
// //       barcodeB
// //     );
// //     setApgData(newApg);
// //   };

// //   // -------------------------------------------------------------
// //   // 3) כפתור "שמירת שינויים" -> שליחת עדכון לשרת
// //   // -------------------------------------------------------------
// //   const handleSaveChanges = async () => {
// //     if (!activeA) return;

// //     const apgOfA = findApgByBarcode(apgData, activeA);
// //     if (!apgOfA) {
// //       setMode("initial");
// //       setActiveA(null);
// //       setActiveGroupName(null);
// //       return;
// //     }

// //     try {
// //       const resGet = await getAlternativeProductsGroupsByBarcode(activeA);
// //       if (resGet?.data?.groupsByBarcode) {
// //         // כבר קיים בשרת
// //         await updateAlternativeProductsGroupsByBarcode(activeA, {
// //           groups: apgOfA.groups,
// //         });
// //       } else {
// //         // לא קיים -> יצירה
// //         await createAlternativeProductsGroups({
// //           barcode: activeA,
// //           groups: apgOfA.groups,
// //         });
// //       }
// //     } catch (err) {
// //       console.error("Error saving changes:", err);
// //     }

// //     setMode("initial");
// //     setActiveA(null);
// //     setActiveGroupName(null);
// //   };

// //   // -------------------------------------------------------------
// //   // 4) הצגת קבוצות
// //   // -------------------------------------------------------------
// //   const handleShowGroups = (barcodeA) => {
// //     setActiveA(barcodeA);
// //     setShowShowGroupsModal(true);
// //   };

// //   // -------------------------------------------------------------
// //   // 5) העתקת APG
// //   // -------------------------------------------------------------
// //   const handleCopyAPG = (barcodeA) => {
// //     setActiveA(barcodeA);
// //     setMode("copyAPG");
// //   };

// //   const handleCopyEntireAPG = (barcodeB) => {
// //     const newApg = copyAllGroupsFromBtoA(apgData, barcodeB, activeA);
// //     setApgData(newApg);
// //   };

// //   const handleOpenCopyGroupModal = (barcodeB) => {
// //     setCopySourceBarcodeB(barcodeB);
// //     setShowCopyGroupsModal(true);
// //   };

// //   const handleConfirmCopySingleGroup = (groupName) => {
// //     const newApg = copySingleGroupFromBtoA(
// //       apgData,
// //       copySourceBarcodeB,
// //       groupName,
// //       activeA
// //     );
// //     setApgData(newApg);
// //     setShowCopyGroupsModal(false);
// //   };

// //   // -------------------------------------------------------------
// //   // אנימציות החלקה בין קטגוריות/תתי קטגוריות
// //   // -------------------------------------------------------------
// //   const [containerStyle, setContainerStyle] = useState({});
// //   const startTouch = useRef({ x: 0 });
// //   const swipeDirection = useRef(null);

// //   const handleTouchStart = (event) => {
// //     swipeDirection.current = null;
// //     setContainerStyle({});
// //     startTouch.current.x = event.touches[0].clientX;
// //   };

// //   const handleTouchMove = (event) => {
// //     const moveX = event.touches[0].clientX;
// //     const deltaX = moveX - startTouch.current.x;
// //     if (Math.abs(deltaX) > 150) {
// //       swipeDirection.current = deltaX > 0 ? "right" : "left";
// //     }
// //   };

// //   const animateLeft = () => {
// //     setContainerStyle({ animation: "middleToLeft 0.2s ease" });
// //     setTimeout(() => {
// //       setContainerStyle({ animation: "leftToRight 1ms steps(1) forwards" });
// //     }, 200);
// //     setTimeout(() => {
// //       setContainerStyle({ animation: "rightToMiddle 0.3s ease" });
// //     }, 201);
// //   };

// //   const animateRight = () => {
// //     setContainerStyle({ animation: "middleToRight 0.2s ease" });
// //     setTimeout(() => {
// //       setContainerStyle({ animation: "rightToLeft 1ms steps(1) forwards" });
// //     }, 200);
// //     setTimeout(() => {
// //       setContainerStyle({ animation: "leftToMiddle 0.3s ease" });
// //     }, 201);
// //   };

// //   const handleTouchEnd = () => {
// //     const totalCats = allCategories.length;
// //     const subCats = all_sub_categories[activeCategoryIndex] || [];
// //     const totalSub = subCats.length;

// //     if (swipeDirection.current === "right") {
// //       if (activeSubCategoryIndex > 0) {
// //         setActiveSubCategoryIndex(activeSubCategoryIndex - 1);
// //         animateRight();
// //       } else {
// //         const prevIndex = (activeCategoryIndex - 1 + totalCats) % totalCats;
// //         setActiveCategoryIndex(prevIndex);

// //         const prevSub = all_sub_categories[prevIndex] || [];
// //         setActiveSubCategoryIndex(prevSub.length ? prevSub.length - 1 : 0);
// //         animateRight();
// //       }
// //       window.scrollTo(0, 0);
// //     } else if (swipeDirection.current === "left") {
// //       if (activeSubCategoryIndex < totalSub - 1) {
// //         setActiveSubCategoryIndex(activeSubCategoryIndex + 1);
// //         animateLeft();
// //       } else {
// //         const nextIndex = (activeCategoryIndex + 1) % totalCats;
// //         setActiveCategoryIndex(nextIndex);
// //         setActiveSubCategoryIndex(0);
// //         animateLeft();
// //       }
// //       window.scrollTo(0, 0);
// //     } else {
// //       setContainerStyle({});
// //     }
// //   };

// //   // -------------------------------------------------------------
// //   // סינון מוצרים לפי קטגוריה ותת-קטגוריה
// //   // -------------------------------------------------------------
// //   const currentCategory = allCategories[activeCategoryIndex];
// //   const subCats = all_sub_categories[activeCategoryIndex] || [];
// //   const currentSubCategory = subCats[activeSubCategoryIndex];

// //   const filteredProducts = products.filter((p) => {
// //     if (p.category !== currentCategory) return false;
// //     if (currentSubCategory) {
// //       return p.subcategory === currentSubCategory;
// //     }
// //     return true;
// //   });

// //   // -------------------------------------------------------------
// //   // עזר לזיהוי אם למוצר (B) יש APG
// //   // -------------------------------------------------------------
// //   const hasAPG = (barcodeB) => {
// //     const apgB = findApgByBarcode(apgData, barcodeB);
// //     return apgB && apgB.groups && apgB.groups.length > 0;
// //   };

// //   // האם מוצר B נמצא בקבוצה activeGroupName של activeA?
// //   const isInActiveGroup = (barcodeB) => {
// //     const apgA = findApgByBarcode(apgData, activeA);
// //     if (!apgA) return false;
// //     const group = apgA.groups.find((g) => g.groupName === activeGroupName);
// //     return group ? group.barcodes.includes(barcodeB) : false;
// //   };

// //   // פונקציה אופציונלית
// //   const moveToPriceList = (barcode) => {
// //     console.log("moveToPriceList:", barcode);
// //     // nav(`/priceList/${barcode}`);
// //   };

// //   // -------------------------------------------------------------
// //   // רינדור
// //   // -------------------------------------------------------------
// //   return (
// //     <div className="mp_products-wrapper">
// //       <CategoryNavigation />
// //       <SubCategoryNavigation />

// //       <div
// //         className="mp_products-container"
// //         style={containerStyle}
// //         onTouchStart={handleTouchStart}
// //         onTouchMove={handleTouchMove}
// //         onTouchEnd={handleTouchEnd}
// //       >
// //         {filteredProducts.map((product) => {
// //           const barcode = product.barcode;

// //           // מצב initial + או copyAPG (אבל מדובר במוצר A עצמו)
// //           if (
// //             mode === "initial" ||
// //             (mode === "copyAPG" && barcode === activeA)
// //           ) {
// //             return (
// //               <div key={barcode} className="mp_product-card">
// //                 {/* <div className="apg_product-badge">מבצע</div> אם תרצה */}

// //                 {/* טקסט מימין */}
// //                 <div className="mp_product-data">
// //                   <h3 className="mp_product-name">{product.name}</h3>
// //                   <div className="mp_product-info">
// //                     <p>{product.weight}</p>
// //                     <p>{convertWeightUnit(product.unitWeight)}</p>
// //                     <p className="mp_separator">|</p>
// //                     <p>{product.brand}</p>
// //                   </div>

// //                   {/* רק במצב initial מציגים כפתורי "יצירת/עריכה", "הצג", "העתקת APG" */}
// //                   {mode === "initial" && (
// //                     <div style={{ marginTop: "0.5rem" }}>
// //                       {/* <button
// //                         onClick={() => handleCreateEditAPG(barcode)}
// //                         style={{
// //                           backgroundColor: "#008cba",
// //                           color: "#fff",
// //                           marginRight: "0.5rem",
// //                         }}
// //                       >
// //                         יצירת/עריכת APG
// //                       </button>
// //                       <button
// //                         onClick={() => handleShowGroups(barcode)}
// //                         style={{
// //                           backgroundColor: "#4caf50",
// //                           color: "#fff",
// //                           marginRight: "0.5rem",
// //                         }}
// //                       >
// //                         הצג קבוצות
// //                       </button>
// //                       <button
// //                         onClick={() => handleCopyAPG(barcode)}
// //                         style={{ backgroundColor: "#f0ad4e", color: "#fff" }}
// //                       >
// //                         העתקת APG
// //                       </button> */}
// //                     </div>
// //                   )}
// //                 </div>

// //                 {/* תמונה משמאל */}
// //                 <div
// //                   className="mp_product-image"
// //                   onClick={() => moveToPriceList(barcode)}
// //                 >
// //                   <Image barcode={barcode} />
// //                 </div>
// //               </div>
// //             );
// //           }

// //           // מצב editGroup -> כפתורי הוספה/הסרה
// //           if (mode === "editGroup" && barcode !== activeA) {
// //             const inGroup = isInActiveGroup(barcode);
// //             return (
// //               <div key={barcode} className="mp_product-card">
// //                 <div className="mp_product-data">
// //                   <h3 className="mp_product-name">{product.name}</h3>
// //                   <div className="mp_product-info">
// //                     <p>{product.weight}</p>
// //                     <p>{convertWeightUnit(product.unitWeight)}</p>
// //                     <p className="mp_separator">|</p>
// //                     <p>{product.brand}</p>
// //                   </div>
// //                   <div style={{ marginTop: "0.5rem" }}>
// //                     {inGroup ? (
// //                       <button
// //                         style={{ backgroundColor: "#f44336", color: "#fff" }}
// //                         onClick={() => handleRemoveFromGroup(barcode)}
// //                       >
// //                         הסר מהקבוצה
// //                       </button>
// //                     ) : (
// //                       <button
// //                         style={{ backgroundColor: "#4caf50", color: "#fff" }}
// //                         onClick={() => handleAddToGroup(barcode)}
// //                       >
// //                         הוסף לקבוצה
// //                       </button>
// //                     )}
// //                   </div>
// //                 </div>
// //                 <div className="mp_product-image">
// //                   <Image barcode={barcode} />
// //                 </div>
// //               </div>
// //             );
// //           }

// //           // מצב copyAPG -> למוצרים שאינם A ויש להם APG
// //           if (mode === "copyAPG" && barcode !== activeA && hasAPG(barcode)) {
// //             return (
// //               <div key={barcode} className="mp_product-card">
// //                 <div className="mp_product-data">
// //                   <h3 className="mp_product-name">{product.name}</h3>
// //                   <div className="mp_product-info">
// //                     <p>{product.weight}</p>
// //                     <p>{convertWeightUnit(product.unitWeight)}</p>
// //                     <p className="mp_separator">|</p>
// //                     <p>{product.brand}</p>
// //                   </div>
// //                   <div style={{ marginTop: "0.5rem" }}>
// //                     <button
// //                       style={{
// //                         backgroundColor: "#f0ad4e",
// //                         color: "#fff",
// //                         marginRight: "0.5rem",
// //                       }}
// //                       onClick={() => handleCopyEntireAPG(barcode)}
// //                     >
// //                       העתקת APG ממוצר זה
// //                     </button>
// //                     <button
// //                       style={{ backgroundColor: "#5bc0de", color: "#fff" }}
// //                       onClick={() => handleOpenCopyGroupModal(barcode)}
// //                     >
// //                       העתקת קבוצה
// //                     </button>
// //                   </div>
// //                 </div>
// //                 <div className="mp_product-image">
// //                   <Image barcode={barcode} />
// //                 </div>
// //               </div>
// //             );
// //           }

// //           // מצב copyAPG -> אין APG
// //           if (mode === "copyAPG" && !hasAPG(barcode)) {
// //             return (
// //               <div key={barcode} className="mp_product-card">
// //                 <div className="mp_product-data">
// //                   <h3 className="mp_product-name">{product.name}</h3>
// //                   <div className="mp_product-info">
// //                     <p>{product.weight}</p>
// //                     <p>{convertWeightUnit(product.unitWeight)}</p>
// //                     <p className="mp_separator">|</p>
// //                     <p>{product.brand}</p>
// //                   </div>
// //                   <p style={{ marginTop: "0.5rem", color: "#f00" }}>
// //                     אין APG למוצר זה
// //                   </p>
// //                 </div>
// //                 <div className="mp_product-image">
// //                   <Image barcode={barcode} />
// //                 </div>
// //               </div>
// //             );
// //           }

// //           return null;
// //         })}
// //       </div>

// //       {/* כפתור "שמירת שינויים" כאשר mode = editGroup או copyAPG */}
// //       {/* {(mode === "editGroup" || mode === "copyAPG") && activeA && (
// //         <button
// //           style={{
// //             marginTop: "1rem",
// //             backgroundColor: "#4caf50",
// //             color: "#fff",
// //             border: "none",
// //             padding: "0.6rem 1rem",
// //             borderRadius: "5px",
// //             cursor: "pointer",
// //           }}
// //           onClick={handleSaveChanges}
// //         >
// //           שמירת שינויים
// //         </button>
// //       )} */}

// //       {/* מודאל: יצירת/בחירת קבוצה */}
// //       {/* {showAPGGroupsModal && (
// //         <ModalAPGGroups
// //           isOpen={showAPGGroupsModal}
// //           onClose={() => setShowAPGGroupsModal(false)}
// //           groups={getGroupsForBarcode(apgData, activeA)}
// //           onGroupSelected={handleGroupSelected}
// //           onCreateNewGroup={(groupName) => {
// //             const newData = addNewGroup(apgData, activeA, groupName);
// //             setApgData(newData);
// //             handleGroupSelected(groupName);
// //           }}
// //         />
// //       )} */}

// //       {/* מודאל: הצגת קבוצות + מחיקה */}
// //       {/* {showShowGroupsModal && (
// //         <ModalShowGroups
// //           isOpen={showShowGroupsModal}
// //           apgData={apgData}
// //           setApgData={setApgData}
// //           barcodeA={activeA}
// //           // כשהמשתמש סוגר המודאל ללא אישור
// //           onCloseNoSave={() => {
// //             setShowShowGroupsModal(false);
// //             setMode("initial"); // חוזרים למצב התחלתי
// //           }}
// //           // כשהמשתמש אישר שמירת שינויים מקומי
// //           onApplyChanges={() => {
// //             setShowShowGroupsModal(false);
// //             setMode("editGroup"); // מציג כפתור שמירת שינויים
// //           }}
// //         />
// //       )} */}

// //       {/* מודאל: העתקת קבוצה ממוצר B */}
// //       {/* {showCopyGroupsModal && (
// //         <ModalCopyGroups
// //           isOpen={showCopyGroupsModal}
// //           onClose={() => setShowCopyGroupsModal(false)}
// //           barcodeB={copySourceBarcodeB}
// //           apgData={apgData}
// //           onConfirmCopySingleGroup={handleConfirmCopySingleGroup}
// //         />
// //       )} */}
// //     </div>
// //   );
// // }

// // export default ProductListManagerAlternativeProductsGroups;


// // src/components/EditProducts.js
// import React, { useEffect, useState, useRef } from "react";
// import {
//   getAllProducts,
//   createProduct,
//   updateProductById,
//   updateProductsByBarcode,
//   deleteProductById,
// } from "../../network/editProductsService";

// // ניווט קטגוריות (לדוגמה)
// import CategoryNavigation from "./CategoryNavigation";
// import SubCategoryNavigation from "./SubCategoryNavigation";
// import Image from "./Images"; // להצגת תמונות מוצרים

// // אם יש לך context מוצרים
// import { useProducts } from "../../context/ProductContext";

// // ה־CSS
// import "./ManageProducts.css";

// /** פונקציית עזר להמרת יחידת משקל */
// function convertWeightUnit(unit) {
//   if (!unit) return "";
//   switch ((unit || "").toLowerCase()) {
//     case "g":
//       return "גרם";
//     case "kg":
//       return 'ק"ג';
//     case "ml":
//       return 'מ"ל';
//     case "l":
//       return "ליטר";
//     default:
//       return unit;
//   }
// }

// export default function EditProducts() {
//   const {
//     products,                // בא מהקונטקסט useProducts
//     allCategories,
//     all_sub_categories,
//     activeCategoryIndex,
//     setActiveCategoryIndex,
//     activeSubCategoryIndex,
//     setActiveSubCategoryIndex
//   } = useProducts();

//   // מצבי עבודה בסיסיים
//   const [mode, setMode] = useState("initial"); 
//   // "initial" | "addProduct" | "bulkEdit" | "editSingle" | ...

//   // אנימציית החלקה לקטגוריות
//   const [containerStyle, setContainerStyle] = useState({});
//   const startTouch = useRef({ x: 0 });
//   const swipeDirection = useRef(null);

//   // -----------------------------------------------------------
//   // אנימציות החלקה (סוויפ) לקטגוריות
//   // -----------------------------------------------------------
//   const handleTouchStart = (evt) => {
//     swipeDirection.current = null;
//     setContainerStyle({});
//     startTouch.current.x = evt.touches[0].clientX;
//   };
//   const handleTouchMove = (evt) => {
//     const moveX = evt.touches[0].clientX;
//     const deltaX = moveX - startTouch.current.x;
//     if (Math.abs(deltaX) > 150) {
//       swipeDirection.current = deltaX > 0 ? "right" : "left";
//     }
//   };
//   const animateLeft = () => {
//     setContainerStyle({ animation: "middleToLeft 0.2s ease" });
//     setTimeout(() => {
//       setContainerStyle({ animation: "leftToRight 1ms steps(1) forwards" });
//     }, 200);
//     setTimeout(() => {
//       setContainerStyle({ animation: "rightToMiddle 0.3s ease" });
//     }, 201);
//   };
//   const animateRight = () => {
//     setContainerStyle({ animation: "middleToRight 0.2s ease" });
//     setTimeout(() => {
//       setContainerStyle({ animation: "rightToLeft 1ms steps(1) forwards" });
//     }, 200);
//     setTimeout(() => {
//       setContainerStyle({ animation: "leftToMiddle 0.3s ease" });
//     }, 201);
//   };
//   const handleTouchEnd = () => {
//     const totalCats = allCategories.length;
//     const subCats = all_sub_categories[activeCategoryIndex] || [];
//     const totalSub = subCats.length;

//     if (swipeDirection.current === "right") {
//       if (activeSubCategoryIndex > 0) {
//         setActiveSubCategoryIndex(activeSubCategoryIndex - 1);
//         animateRight();
//       } else {
//         const prevIndex = (activeCategoryIndex - 1 + totalCats) % totalCats;
//         setActiveCategoryIndex(prevIndex);
//         const prevSub = all_sub_categories[prevIndex] || [];
//         setActiveSubCategoryIndex(prevSub.length ? prevSub.length - 1 : 0);
//         animateRight();
//       }
//       window.scrollTo(0, 0);
//     }
//     else if (swipeDirection.current === "left") {
//       if (activeSubCategoryIndex < totalSub - 1) {
//         setActiveSubCategoryIndex(activeSubCategoryIndex + 1);
//         animateLeft();
//       } else {
//         const nextIndex = (activeCategoryIndex + 1) % totalCats;
//         setActiveCategoryIndex(nextIndex);
//         setActiveSubCategoryIndex(0);
//         animateLeft();
//       }
//       window.scrollTo(0, 0);
//     } else {
//       // אין סוויפ משמעותי
//       setContainerStyle({});
//     }
//   };

//   // סינון המוצרים לפי קטגוריה ותת־קטגוריה
//   const currentCategory = allCategories[activeCategoryIndex];
//   const subCats = all_sub_categories[activeCategoryIndex] || [];
//   const currentSubCategory = subCats[activeSubCategoryIndex];

//   const filteredProducts = products.filter((prod) => {
//     if (prod.category !== currentCategory) return false;
//     if (currentSubCategory) {
//       return prod.subcategory === currentSubCategory;
//     }
//     return true;
//   });

//   // -----------------------------------------------------------
//   // כפתורי מצב (בדוגמה: "הוספת מוצר", "עריכה מרובה")
//   // -----------------------------------------------------------
//   const handleAddProduct = () => {
//     setMode("addProduct");
//     // כאן אפשר לפתוח מודאל או לשנות state
//   };
//   const handleBulkEdit = () => {
//     setMode("bulkEdit");
//     // מצב שבו רואים checkbox בכל מוצר
//   };

//   // -----------------------------------------------------------
//   // Render
//   // -----------------------------------------------------------
//   return (
//     <div className="mp_products-wrapper">
//       {/* ניווט קטגוריות */}
//       <CategoryNavigation />
//       <SubCategoryNavigation />

//       {/* כפתורים למעלה (בדוגמה - רק במצב initial) */}
//       {mode === "initial" && (
//         <div style={{ margin: "1rem" }}>
//           <button style={{ marginRight: "0.5rem" }} onClick={handleAddProduct}>
//             הוספת מוצר
//           </button>
//           <button onClick={handleBulkEdit}>
//             עריכה מרובה
//           </button>
//         </div>
//       )}

//       {/* אזור הצגת המוצרים */}
//       <div
//         className="mp_products-container"
//         style={containerStyle}
//         onTouchStart={handleTouchStart}
//         onTouchMove={handleTouchMove}
//         onTouchEnd={handleTouchEnd}
//       >
//         {filteredProducts.map((prod) => (
//           <div key={prod._id || prod.barcode} className="mp_product-card">
//             {/* עמודת טקסט (ימין) */}
//             <div className="mp_product-data">
//               <h3 className="mp_product-name">{prod.name}</h3>
//               <div className="mp_product-info">
//                 <p>{prod.weight}</p>
//                 <p>{convertWeightUnit(prod.unitWeight)}</p>
//                 <p className="mp_separator">|</p>
//                 <p>{prod.brand}</p>
//               </div>
//               {/* כפתורים או מצב נוסף */}
//             </div>

//             {/* עמודת תמונה (שמאל) */}
//             <div className="mp_product-image">
//               <Image barcode={prod.barcode} />
//             </div>
//           </div>
//         ))}
//       </div>
//     </div>
//   );
// }

// src/components/EditProducts.js

import React, { useEffect, useState, useRef } from "react";
import {
  getAllProducts,
  createProduct,
  updateProductById,
  updateProductsByBarcode,
  deleteProductById,
} from "../../network/editProductsService";

// ניווט קטגוריות (לדוגמה)
import CategoryNavigation from "./CategoryNavigation";
import SubCategoryNavigation from "./SubCategoryNavigation";
import Image from "./Images"; // להצגת תמונות מוצרים

// אם יש לך context מוצרים
import { useProducts } from "../../context/ProductContext";

// מודאלים
import ModalAddProduct from "./modals/ModalAddProduct";
import ModalSingleEdit from "./modals/ModalSingleEdit";
import ModalBulkEdit from "./modals/ModalBulkEdit";
import ModalGlobalEdit from "./modals/ModalGlobalEdit";

// ה־CSS (כולל עיצוב הכפתורים, הכרטיסים, והאנימציות)
import "./ManageProducts.css";

/** פונקציית עזר להמרת יחידת משקל */
function convertWeightUnit(unit) {
  if (!unit) return "";
  switch ((unit || "").toLowerCase()) {
    case "g":
      return "גרם";
    case "kg":
      return 'ק"ג';
    case "ml":
      return 'מ"ל';
    case "l":
      return "ליטר";
    default:
      return unit;
  }
}

export default function EditProducts() {
  const {
    products,                
    allCategories,
    all_sub_categories,
    activeCategoryIndex,
    setActiveCategoryIndex,
    activeSubCategoryIndex,
    setActiveSubCategoryIndex
  } = useProducts();

  // מצב ראשי
  const [mode, setMode] = useState("initial"); 
  // 'initial' | 'addProduct' | 'bulkEdit' | 'editSingle' | 'globalEdit'

  // מוצר נבחר לעריכה יחידנית
  const [selectedProduct, setSelectedProduct] = useState(null);

  // מוצרים נבחרים (לעריכה מרובה)
  const [selectedBarcodes, setSelectedBarcodes] = useState([]);

  // אנימציה לקטגוריות
  const [containerStyle, setContainerStyle] = useState({});
  const startTouch = useRef({ x: 0 });
  const swipeDirection = useRef(null);

  // נטען קודם (אם צריך) - כאן אני מניח שה־products כבר בקונטקסט
  
  // ============ אנימציות החלקה ============
  const handleTouchStart = (evt) => {
    swipeDirection.current = null;
    setContainerStyle({});
    startTouch.current.x = evt.touches[0].clientX;
  };
  const handleTouchMove = (evt) => {
    const moveX = evt.touches[0].clientX;
    const deltaX = moveX - startTouch.current.x;
    if (Math.abs(deltaX) > 150) {
      swipeDirection.current = deltaX > 0 ? "right" : "left";
    }
  };
  const animateLeft = () => {
    setContainerStyle({ animation: "middleToLeft 0.2s ease" });
    setTimeout(() => {
      setContainerStyle({ animation: "leftToRight 1ms steps(1) forwards" });
    }, 200);
    setTimeout(() => {
      setContainerStyle({ animation: "rightToMiddle 0.3s ease" });
    }, 201);
  };
  const animateRight = () => {
    setContainerStyle({ animation: "middleToRight 0.2s ease" });
    setTimeout(() => {
      setContainerStyle({ animation: "rightToLeft 1ms steps(1) forwards" });
    }, 200);
    setTimeout(() => {
      setContainerStyle({ animation: "leftToMiddle 0.3s ease" });
    }, 201);
  };
  const handleTouchEnd = () => {
    const totalCats = allCategories.length;
    const subCats = all_sub_categories[activeCategoryIndex] || [];
    const totalSub = subCats.length;

    if (swipeDirection.current === "right") {
      // החלקה ימינה
      if (activeSubCategoryIndex > 0) {
        setActiveSubCategoryIndex(activeSubCategoryIndex - 1);
        animateRight();
      } else {
        const prevIndex = (activeCategoryIndex - 1 + totalCats) % totalCats;
        setActiveCategoryIndex(prevIndex);
        const prevSub = all_sub_categories[prevIndex] || [];
        setActiveSubCategoryIndex(prevSub.length ? prevSub.length - 1 : 0);
        animateRight();
      }
      window.scrollTo(0, 0);
    }
    else if (swipeDirection.current === "left") {
      // החלקה שמאלה
      if (activeSubCategoryIndex < totalSub - 1) {
        setActiveSubCategoryIndex(activeSubCategoryIndex + 1);
        animateLeft();
      } else {
        const nextIndex = (activeCategoryIndex + 1) % totalCats;
        setActiveCategoryIndex(nextIndex);
        setActiveSubCategoryIndex(0);
        animateLeft();
      }
      window.scrollTo(0, 0);
    }
    else {
      setContainerStyle({});
    }
  };

  // ============ סינון מוצרים ============
  const currentCategory = allCategories[activeCategoryIndex];
  const subCats = all_sub_categories[activeCategoryIndex] || [];
  const currentSubCategory = subCats[activeSubCategoryIndex];

  const filteredProducts = products.filter((prod) => {
    if (prod.category !== currentCategory) return false;
    if (currentSubCategory) {
      return prod.subcategory === currentSubCategory;
    }
    return true;
  });

  // ============ כפתורים למעלה ============
  const handleAddProduct = () => {
    setMode("addProduct");
  };
  const handleBulkEdit = () => {
    setMode("bulkEdit");
    setSelectedBarcodes([]);
  };
  const handleGlobalEdit = () => {
    setMode("globalEdit");
  };

  // ============ סגירת כל המצבים/מודאלים ============
  const handleCloseAll = () => {
    setMode("initial");
    setSelectedProduct(null);
    setSelectedBarcodes([]);
  };

  // ============ "ערוך" במוצר יחיד =========== 
  const handleEditSingle = (product) => {
    setSelectedProduct(product);
    setMode("editSingle");
  };

  // ============ מחיקה מוצר =========== 
  const handleDeleteProduct = async (id) => {
    try {
      await deleteProductById(id);
      // כאן מומלץ להסירו גם מהסטייט (אם שמרת products כאן)
      // בקונטקסט useProducts אולי יש פונקציה לעדכן...
      // or if the context is read-only, you'd do something else
      // For simplicity:
      // setProducts(prev => prev.filter(p => p._id !== id));
    } catch (err) {
      console.error("Error deleting product:", err);
    }
  };

  // ============ Render ============
  return (
    <div className="mp_products-wrapper">
      {/* ניווט קטגוריות */}
      <CategoryNavigation />
      <SubCategoryNavigation />

      {/* כפתורי מצב בראש הדף */}
      {mode === "initial" && (
        <div className="mp_top-buttons">
          <button className="mp_btn" onClick={handleAddProduct}>
            הוספת מוצר
          </button>
          <button className="mp_btn" onClick={handleBulkEdit}>
            עריכה מרובה
          </button>
          <button className="mp_btn" onClick={handleGlobalEdit}>
            עריכה כללית
          </button>
        </div>
      )}

      <div
        className="mp_products-container"
        style={containerStyle}
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
      >
        {filteredProducts.map((prod) => (
          <div key={prod._id || prod.barcode} className="mp_product-card">
            {/* עמודת טקסט (ימין) */}
            <div className="mp_product-data">
              <h3 className="mp_product-name">{prod.name}</h3>
              <div className="mp_product-info">
                <p>{prod.weight}</p>
                <p>{convertWeightUnit(prod.unitWeight)}</p>
                <p className="mp_separator">|</p>
                <p>{prod.brand}</p>
              </div>

              {/* כפתור "ערוך" ו"מחק" (רק במצב initial) */}
              {mode === "initial" && (
                <div style={{ marginTop: "0.5rem", display: "flex", gap: "0.5rem" }}>
                  <button
                    style={{ backgroundColor: "#008cba", color: "#fff", border: "none", padding: "0.3rem 0.6rem", borderRadius: "4px" }}
                    onClick={() => handleEditSingle(prod)}
                  >
                    ערוך
                  </button>
                  <button
                    style={{ backgroundColor: "#f44336", color: "#fff", border: "none", padding: "0.3rem 0.6rem", borderRadius: "4px" }}
                    onClick={() => handleDeleteProduct(prod._id)}
                  >
                    מחק
                  </button>
                </div>
              )}

              {/* במצב bulkEdit => checkbox */}
              {mode === "bulkEdit" && (
                <div style={{ marginTop: "0.5rem" }}>
                  <input
                    type="checkbox"
                    checked={selectedBarcodes.includes(prod.barcode)}
                    onChange={(e) => {
                      if (e.target.checked) {
                        setSelectedBarcodes([...selectedBarcodes, prod.barcode]);
                      } else {
                        setSelectedBarcodes(
                          selectedBarcodes.filter((bc) => bc !== prod.barcode)
                        );
                      }
                    }}
                  />
                </div>
              )}
            </div>

            {/* עמודת תמונה (משמאל) */}
            <div className="mp_product-image">
              <Image barcode={prod.barcode} />
            </div>
          </div>
        ))}
      </div>

      {/* כאן נדגים הצגת המודאלים (מותנה ב-mode) */}
      <ModalAddProduct
        isOpen={mode === "addProduct"}
        onClose={handleCloseAll}
        onProductCreated={async (newProd) => {
          try {
            const res = await createProduct(newProd);
            // עדכן Products (אם אתה מחזיק אותם כאן, אחרת בקונטקסט)
            // setProducts(prev => [...prev, res.data.product]);
            handleCloseAll();
          } catch (err) {
            console.error("Error creating product:", err);
          }
        }}
      />

      <ModalSingleEdit
        isOpen={mode === "editSingle" && selectedProduct}
        onClose={handleCloseAll}
        product={selectedProduct}
        onSave={async (updates) => {
          try {
            if (!selectedProduct) return;
            const res = await updateProductById(selectedProduct._id, updates);
            // עדכן Products
            // setProducts(prev => prev.map(p => p._id === selectedProduct._id ? res.data.product : p));
            handleCloseAll();
          } catch (err) {
            console.error("Error updating product:", err);
          }
        }}
      />

      <ModalBulkEdit
        isOpen={mode === "bulkEdit"}
        onClose={handleCloseAll}
        selectedBarcodes={selectedBarcodes}
        onApply={async (commonUpdates) => {
          if (!selectedBarcodes || !selectedBarcodes.length) {
            handleCloseAll();
            return;
          }
          const arr = selectedBarcodes.map((bc) => ({
            barcode: bc,
            ...commonUpdates
          }));
          try {
            const res = await updateProductsByBarcode(arr);
            // עדכן products
            // const updatedList = res.data.products;
            // setProducts(...);
            handleCloseAll();
          } catch (err) {
            console.error("Error in bulk edit:", err);
          }
        }}
      />

      <ModalGlobalEdit
        isOpen={mode === "globalEdit"}
        onClose={handleCloseAll}
        onApplyChanges={(globalData) => {
          // כאן אפשר לממש לוגיקה משלך (אם יש נקודת קצה מתאימה בשרת)
          console.log("Global Data:", globalData);
          handleCloseAll();
        }}
      />
    </div>
  );
}



Images.js:

import Img111186 from "./images/111186.png";
import Img111353 from "./images/111353.png";
import Img111360 from "./images/111360.png";
import Img111384 from "./images/111384.png";
import Img11210000094 from "./images/11210000094.png";
import Img144474 from "./images/144474.png";
import Img161358 from "./images/161358.png";
import Img18000701223 from "./images/18000701223.png";
import Img18000703494 from "./images/18000703494.png";
............................................................
import Img9044400851672 from "./images/9044400851672.png";
import Img90446269 from "./images/90446269.png";
import Img9120025839896 from "./images/9120025839896.png";
import Img9322969000015 from "./images/9322969000015.png";
import Img9800800056 from "./images/9800800056.png";

const getProductImage = (barcode) => {
  switch (barcode) {
    case "111186":
      return Img111186;
    case "111353":
      return Img111353;
    case "111360":
      return Img111360;
..........................
      return Img9322969000015;
    case "9800800056":
      return Img9800800056;
    default:
      return Img111353;
  }
};

const ProductsImages = ({ barcode }) => {
  return <img src={getProductImage(barcode)} alt="Product" />;
};

export default ProductsImages;



ModalAPGGroups.js:

import React, { useState } from "react";
import Modal from "../Cart/Modal"; // לדוגמה. אם יש לך Modal משלך
import "./ModalAPGGroups.css"; // ה-CSS החדש

function ModalAPGGroups({
  isOpen,
  onClose,
  groups,
  onGroupSelected,
  onCreateNewGroup,
}) {
  const [showNewGroupInput, setShowNewGroupInput] = useState(false);
  const [newGroupName, setNewGroupName] = useState("");

  if (!isOpen) return null;

  const handleSelectGroup = (groupName) => {
    onGroupSelected(groupName);
  };

  const handleCreateGroup = () => {
    if (newGroupName.trim()) {
      onCreateNewGroup(newGroupName.trim());
    }
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose}>
      <div className="apg-modal-container">
        <h2 className="apg-modal-title">בחר/צור קבוצה</h2>

        <div className="apg-modal-groups-list">
          {groups && groups.length > 0 ? (
            groups.map((g) => (
              <button
                key={g.groupName}
                className="apg-modal-groups-list__button"
                onClick={() => handleSelectGroup(g.groupName)}
              >
                {g.groupName}
              </button>
            ))
          ) : (
            <p className="apg-modal-groups-list__empty">
              אין קבוצות קיימות למוצר זה.
            </p>
          )}
        </div>

        {!showNewGroupInput && (
          <button
            className="apg-modal-btn create-btn"
            onClick={() => setShowNewGroupInput(true)}
          >
            יצירת קבוצה חדשה
          </button>
        )}

        {showNewGroupInput && (
          <div className="apg-modal-create-group">
            <input
              type="text"
              className="apg-modal-create-group__input"
              placeholder="שם הקבוצה..."
              value={newGroupName}
              onChange={(e) => setNewGroupName(e.target.value)}
            />
            <button
              className="apg-modal-btn confirm-btn"
              onClick={handleCreateGroup}
            >
              אישור
            </button>
          </div>
        )}

        <button
          className="apg-modal-btn cancel-btn"
          onClick={onClose}
          style={{ marginTop: "1rem" }}
        >
          ביטול
        </button>
      </div>
    </Modal>
  );
}

export default ModalAPGGroups;



ModalCopyGroups.js:

import React, { useState } from "react";
import Modal from "../Cart/Modal";

function findApgByBarcode(apgData, barcode) {
  return apgData.find((item) => item.barcode === barcode);
}

function ModalCopyGroups({
  isOpen,
  onClose,
  barcodeB,
  apgData,
  onConfirmCopySingleGroup,
}) {
  const [selectedGroup, setSelectedGroup] = useState(null);
  const [showProducts, setShowProducts] = useState(false);

  if (!isOpen) return null;

  const apgB = findApgByBarcode(apgData, barcodeB);
  const groupsB = apgB ? apgB.groups : [];

  const handleSelectGroup = (groupName) => {
    setSelectedGroup(groupName);
  };

  const handleShowProducts = (groupName) => {
    setSelectedGroup(groupName);
    setShowProducts(true);
  };

  const handleBackToGroups = () => {
    setSelectedGroup(null);
    setShowProducts(false);
  };

  const handleConfirm = () => {
    if (selectedGroup) {
      onConfirmCopySingleGroup(selectedGroup);
    }
  };

  if (showProducts && selectedGroup) {
    const groupObj = groupsB.find((g) => g.groupName === selectedGroup);
    const barcodes = groupObj ? groupObj.barcodes : [];
    return (
      <Modal isOpen={isOpen} onClose={onClose}>
        <h3>
          מוצרים בקבוצה {selectedGroup} של מוצר {barcodeB}
        </h3>
        {barcodes.map((b) => (
          <p key={b}>ברקוד: {b}</p>
        ))}
        <button onClick={handleBackToGroups} style={{ marginTop: "1rem" }}>
          חזרה
        </button>
      </Modal>
    );
  }

  return (
    <Modal isOpen={isOpen} onClose={onClose}>
      <h2>בחר קבוצה להעתקה ממוצר {barcodeB}</h2>
      {groupsB.length === 0 ? (
        <p>אין קבוצות למוצר זה.</p>
      ) : (
        groupsB.map((g) => (
          <div key={g.groupName} style={{ marginBottom: "0.5rem" }}>
            <button onClick={() => handleSelectGroup(g.groupName)}>
              {g.groupName}
            </button>
            <button
              onClick={() => handleShowProducts(g.groupName)}
              style={{ marginLeft: "0.5rem" }}
            >
              show
            </button>
          </div>
        ))
      )}
      <div style={{ marginTop: "1rem" }}>
        <button onClick={handleConfirm} disabled={!selectedGroup}>
          אישור
        </button>
        <button onClick={onClose} style={{ marginLeft: "1rem" }}>
          ביטול
        </button>
      </div>
    </Modal>
  );
}

export default ModalCopyGroups;



ModalShowGroups.js:

import React, { useState } from "react";
import Modal from "../Cart/Modal";
import Image from "../ProductList/Images"; 
import "./ModalProductsMobile.css";
import { getAlternativeProductsGroupsDetails } from "../../network/alternativeProductsGroupsService";

function convertWeightUnit(unit) {
  if (!unit) return "";
  switch ((unit || "").toLowerCase()) {
    case "g":
      return "גרם";
    case "kg":
      return 'ק"ג';
    case "ml":
      return 'מ"ל';
    case "l":
      return "ליטר";
    default:
      return unit;
  }
}

function ModalShowGroups({
  isOpen,
  onCloseNoSave,      // <--- שינוי: פונקציה לסגירה ללא שמירה
  onApplyChanges,     // <--- שינוי: פונקציה להפעלת מצב editGroup בקומפוננטה האב
  apgData,
  setApgData,
  barcodeA,
}) {
  const [selectedGroupToShow, setSelectedGroupToShow] = useState(null);
  const [productsInGroup, setProductsInGroup] = useState([]);

  const [localData, setLocalData] = useState(JSON.parse(JSON.stringify(apgData)));
  const [isDirty, setIsDirty] = useState(false);

  if (!isOpen) return null;

  const apgA = localData.find((item) => item.barcode === barcodeA);
  const groupsA = apgA ? apgA.groups : [];

  const handleShowProductsInGroup = async (groupName) => {
    setSelectedGroupToShow(groupName);
    const groupObj = apgA?.groups.find((g) => g.groupName === groupName);
    if (!groupObj) {
      setProductsInGroup([]);
      return;
    }
    const barcodes = groupObj.barcodes || [];
    if (barcodes.length === 0) {
      setProductsInGroup([]);
      return;
    }

    try {
      const res = await getAlternativeProductsGroupsDetails(barcodes);
      const detailedProducts = res.data.products || [];
      setProductsInGroup(detailedProducts);
    } catch (err) {
      console.error("Error fetching product details:", err);
      setProductsInGroup([]);
    }
  };

  const handleDeleteGroup = (groupName) => {
    if (!apgA) return;
    apgA.groups = apgA.groups.filter((g) => g.groupName !== groupName);
    setLocalData([...localData]);
    setIsDirty(true);
  };

  const handleDeleteProductInGroup = (groupName, barcodeToDelete) => {
    if (!apgA) return;
    const groupObj = apgA.groups.find((g) => g.groupName === groupName);
    if (!groupObj) return;

    groupObj.barcodes = groupObj.barcodes.filter((b) => b !== barcodeToDelete);
    setLocalData([...localData]);
    setIsDirty(true);

    setProductsInGroup((prev) =>
      prev.filter((p) => p.barcode !== barcodeToDelete)
    );
  };

  // המשתמש לוחץ "אישור (שמירת שינויים מקומי)"
  const handleApplyChangesLocal = () => {
    // 1. מעדכנים apgData בהורה
    setApgData(localData);

    // 2. אפס דגל
    setIsDirty(false);

    // 3. קוראים לפונקציית ההורה שתפעיל mode="editGroup"
    if (onApplyChanges) {
      onApplyChanges();
    }
  };

  if (selectedGroupToShow) {
    // מציגים מוצרים בקבוצה
    return (
      <Modal isOpen={isOpen} onClose={onCloseNoSave /* סגירה ללא שמירה */}>
        <h3 style={{ textAlign: "center" }}>
          מוצרים בקבוצה {selectedGroupToShow}
        </h3>
        <div className="modal-products-container" style={{ direction: "rtl" }}>
          {productsInGroup.length === 0 && <p>אין מוצרים בקבוצה.</p>}
          {productsInGroup.map((product, idx) => (
            <div key={product.barcode}>
              <div className="modal-product" style={{ cursor: "default" }}>
                <div className="modal-product-image">
                  <Image barcode={product.barcode} />
                </div>
                <div
                  className="modal-product-details"
                  style={{ textAlign: "right" }}
                >
                  <p className="modal-product-details__name">
                    {product.name || product.barcode}
                  </p>
                  <p style={{ fontSize: "0.8rem", color: "#666" }}>
                    ברקוד: {product.barcode}
                  </p>
                  <p style={{ marginTop: "0.3rem" }}>
                    {product.brand || "מותג?"} | {product.weight || "?"}{" "}
                    {convertWeightUnit(product.unitWeight)}
                  </p>
                  <button
                    className="danger-button"
                    onClick={() =>
                      handleDeleteProductInGroup(
                        selectedGroupToShow,
                        product.barcode
                      )
                    }
                    style={{ marginTop: "0.5rem" }}
                  >
                    מחק מהמוצרים
                  </button>
                </div>
              </div>
              {idx < productsInGroup.length - 1 && (
                <div className="modal-product-separator"></div>
              )}
            </div>
          ))}
        </div>

        {/* כפתורי סגירה/שמירה */}
        <div style={{ marginTop: "1rem" }}>
          <button onClick={() => setSelectedGroupToShow(null)}>חזרה</button>
          {isDirty && (
            <button
              onClick={handleApplyChangesLocal}
              style={{
                backgroundColor: "green",
                color: "#fff",
                marginLeft: "1rem",
              }}
            >
              אישור (שמירת שינויים מקומי)
            </button>
          )}
        </div>
      </Modal>
    );
  }

  // אם לא בחרנו קבוצה => מציגים את רשימת הקבוצות
  return (
    <Modal isOpen={isOpen} onClose={onCloseNoSave /* סגירה ללא שמירה */}>
      <h2 style={{ textAlign: "center" }}>קבוצות למוצר {barcodeA}</h2>
      <div className="modal-products-container" style={{ direction: "rtl" }}>
        {groupsA.length === 0 && <p>אין קבוצות.</p>}
        {groupsA.map((g, idx) => (
          <div key={g.groupName}>
            <div className="modal-product">
              <div
                className="modal-product-details"
                style={{ textAlign: "right", alignItems: "flex-end" }}
              >
                <p className="modal-product-details__name">{g.groupName}</p>
                <div style={{ marginTop: "0.3rem" }}>
                  <button
                    className="nice-button"
                    onClick={() => handleShowProductsInGroup(g.groupName)}
                  >
                    הצג מוצרים
                  </button>
                  <button
                    className="danger-button"
                    onClick={() => {
                      handleDeleteGroup(g.groupName);
                    }}
                  >
                    מחיקת קבוצה
                  </button>
                </div>
              </div>
            </div>
            {idx < groupsA.length - 1 && (
              <div className="modal-product-separator" />
            )}
          </div>
        ))}
      </div>

      {/* כפתורי סגירה/שמירת שינויים */}
      <div style={{ marginTop: "1rem" }}>
        <button onClick={onCloseNoSave}>סגור</button>
        {isDirty && (
          <button
            onClick={handleApplyChangesLocal}
            style={{
              backgroundColor: "green",
              color: "#fff",
              marginLeft: "1rem",
            }}
          >
            אישור (שמירת שינויים מקומי)
          </button>
        )}
      </div>
    </Modal>
  );
}

export default ModalShowGroups;



ProductList.js:

// // import React, { useEffect, useRef, useState } from "react";
// // import { useProducts } from "../../context/ProductContext";
// // import { useCart } from "../../context/CartContext";
// // import "./ProductsList.css";
// // import { useNavigate } from "react-router";
// // import {
// //   updateProductInCart,
// //   addProductToCart,
// //   deleteProductFromCart,
// // } from "../../network/cartService";
// // import Image from "./Images";
// // import CategoryNavigation from "./CategoryNavigation";

// // export const convertWeightUnit = (weightUnit) => {
// //   weightUnit = weightUnit.toLowerCase();
// //   if (weightUnit === "g") {
// //     return "גרם";
// //   }
// //   if (weightUnit === "kg") {
// //     return 'ק"ג';
// //   }
// //   if (weightUnit === "ml") {
// //     return 'מ"ל';
// //   }
// //   if (weightUnit === "l") {
// //     return "ליטר";
// //   }
// //   if (weightUnit === "u") {
// //     return "יחידות";
// //   }
// //   return weightUnit;
// // };

// // const max18Characters = (str) => {
// //   if (str.length > 23) {
// //     return "..." + str.substring(0, 21);
// //   }
// //   return str;
// // };

// // const priceFormat = (price) => {
// //   return price.toFixed(2);
// // };

// // const discountPriceFormat = (price) => {
// //   const units = price.discount.units;
// //   const totalPrice = price.discount.totalPrice;
// //   return (
// //     <div
// //       className="list__discount-price"
// //       style={{
// //         display: "flex",
// //         flexDirection: "row-reverse",
// //         alignItems: "center",
// //         color: "#ff0000",
// //         fontWeight: "bold",
// //       }}
// //     >
// //       <p style={{ marginLeft: "0.3rem" }}>{units}</p>
// //       <p>{"יחידות ב"}</p>
// //       <p>{" - "}</p>
// //       <p>{priceFormat(totalPrice)}</p>
// //       <p style={{ fontWeight: "bold" }}>{"₪"}</p>
// //     </div>
// //   );
// // };

// // const makeVisible = (button) => {
// //   button.classList.add("visible");
// // };

// // const makeInvisible = (button) => {
// //   button.classList.remove("visible");
// // };

// // const changeButtonToAddProductButton = (button) => {
// //   button.style.backgroundColor = "#00c200";
// //   makeVisible(button);
// //   button.innerText = "הוסף לסל";
// // };

// // const changeButtonToNoChangeAmountButton = (button) => {
// //   makeInvisible(button);
// // };

// // const changeButtonToUpdateAmountButton = (button) => {
// //   button.style.backgroundColor = "#008cba";
// //   makeVisible(button);
// //   button.innerText = "עדכן כמות";
// // };

// // const changeButtonToDeleteProductButton = (button) => {
// //   button.style.backgroundColor = "#ff0000";
// //   makeVisible(button);
// //   button.innerText = "הסר מהסל";
// // };

// // function ProductsList() {
// //   const { products } = useProducts();
// //   const { allCategories, activeCategory, setActiveCategory } = useProducts();
// //   const { getProductsAmountInCart, loadCart } = useCart();
// //   const [productAmounts, setProductAmounts] = useState({});
// //   const [oldProductAmounts, setOldProductAmounts] = useState({});
// //   const userId = "1"; // Replace with actual user ID

// //   const [isLoadData, setIsLoadData] = useState(false);

// //   const nav = useNavigate();

// //   const [containerStyle, setContainerStyle] = useState({});
// //   const startTouch = useRef({ x: 0 });
// //   const swipeDirection = useRef(null); // To store the swipe direction

// //   // Load the product-amount in the cart
// //   useEffect(() => {
// //     const loadAmounts = async () => {
// //       setIsLoadData(true);
// //       const amounts = await getProductsAmountInCart(userId);
// //       const amountsObject = {};
// //       amounts.cart.products.forEach((product) => {
// //         amountsObject[product.barcode] = product.amount;
// //       });
// //       setProductAmounts(amountsObject);
// //       setOldProductAmounts(amountsObject);
// //       setIsLoadData(false);
// //     };
// //     loadAmounts();
// //   }, [getProductsAmountInCart]);

// //   if (isLoadData) {
// //     console.log("loading amounts");
// //     return <div>Loading Amounts...</div>;
// //   }

// //   const handleTouchStart = (event) => {
// //     const x = event.touches[0].clientX;
// //     startTouch.current = { x };
// //     swipeDirection.current = null; // Reset swipe direction on new touch
// //     setContainerStyle({});
// //   };

// //   const handleTouchMove = (event) => {
// //     const moveX = event.touches[0].clientX;
// //     const deltaX = moveX - startTouch.current.x;

// //     if (Math.abs(deltaX) > 150) {
// //       // Threshold for swipe recognition
// //       swipeDirection.current = deltaX > 0 ? "right" : "left";
// //     }
// //   };

// //   const handleTouchEnd = () => {
// //     if (swipeDirection.current === "right") {
// //       // Swipe right - previous category
// //       const currentIndex = allCategories.indexOf(activeCategory);
// //       const prevIndex =
// //         (currentIndex - 1 + allCategories.length) % allCategories.length;
// //       setActiveCategory(allCategories[prevIndex]);

// //       // Apply the middleToRight animation for 1 second
// //       setContainerStyle({ animation: "middleToRight 0.2s ease" });

// //       // After 1 second, apply the RightToLeft animation for 1 millisecond (in one step)
// //       setTimeout(() => {
// //         setContainerStyle({ animation: "rightToLeft 1ms steps(1) forwards" });
// //       }, 200);

// //       // After RightToLeft animation, apply the RightToMiddle animation for 1 second
// //       setTimeout(() => {
// //         setContainerStyle({ animation: "leftToMiddle 0.3s ease" });
// //       }, 201);

// //       // up to the top of the page:
// //       window.scrollTo(0, 0);
// //     } else if (swipeDirection.current === "left") {
// //       // Swipe left - next category
// //       const currentIndex = allCategories.indexOf(activeCategory);
// //       const nextIndex = (currentIndex + 1) % allCategories.length;
// //       setActiveCategory(allCategories[nextIndex]);

// //       // Apply the middleToLeft animation for 1 second
// //       setContainerStyle({ animation: "middleToLeft 0.2s ease" });

// //       // After 1 second, apply the LeftToRight animation for 1 millisecond (in one step)
// //       setTimeout(() => {
// //         setContainerStyle({ animation: "leftToRight 1ms steps(1) forwards" });
// //       }, 200);

// //       // After LeftToRight animation, apply the LeftToMiddle animation for 1 second
// //       setTimeout(() => {
// //         setContainerStyle({ animation: "rightToMiddle 0.3s ease" });
// //       }, 201);

// //       // up to the top of the page:
// //       window.scrollTo(0, 0);
// //     } else {
// //       setContainerStyle({}); // Reset the container's position after the swipe
// //     }
// //   };

// //   const moveToPriceList = (productBarcode) => {
// //     nav(`/priceList/${productBarcode}`);
// //   };

// //   const incrementAmount = (barcode) => {
// //     const newAmount = (productAmounts[barcode] || 0) + 1;
// //     const button = document.querySelector(`#add-to-cart-${barcode}`);
// //     setProductAmounts({
// //       ...productAmounts,
// //       [barcode]: newAmount,
// //     });
// //     // case !old:
// //     if (!oldProductAmounts[barcode]) {
// //       console.log("green button -> is the old = active");
// //       changeButtonToAddProductButton(button);
// //     } else {
// //       // case old:
// //       // case new === 0: -> red and remove from the object:
// //       if (newAmount === 0) {
// //         console.log("red button -> is the old = active");
// //         changeButtonToDeleteProductButton(button);
// //       }
// //       // case new = old:
// //       else if (newAmount === oldProductAmounts[barcode]) {
// //         console.log("gray button -> is the old = active");
// //         changeButtonToNoChangeAmountButton(button);
// //       }
// //       // else (new > 0 && new != old):
// //       else {
// //         console.log(
// //           "blue button -> old != active and old != 0 and active != 0"
// //         );
// //         changeButtonToUpdateAmountButton(button);
// //       }
// //     }
// //   };

// //   const decrementAmount = (barcode) => {
// //     const newAmount = Math.max(0, (productAmounts[barcode] || 0) - 1);
// //     const button = document.querySelector(`#add-to-cart-${barcode}`);
// //     setProductAmounts({
// //       ...productAmounts,
// //       [barcode]: newAmount,
// //     });

// //     // case !old:
// //     if (!oldProductAmounts[barcode]) {
// //       // case new === 0:
// //       if (newAmount === 0) {
// //         console.log("gray button -> is the old = active");
// //         changeButtonToNoChangeAmountButton(button);
// //       }
// //       // case new > 0:
// //       else {
// //         // new > 0
// //         console.log("green button -> is the old = active");
// //         changeButtonToAddProductButton(button);
// //       }
// //     }
// //     // case old:
// //     else {
// //       // case new === 0:
// //       if (newAmount === 0) {
// //         console.log("red button -> is the old = active");
// //         changeButtonToDeleteProductButton(button);
// //       }
// //       // case new === old:
// //       else if (newAmount === oldProductAmounts[barcode]) {
// //         console.log("gray button -> is the old = active");
// //         changeButtonToNoChangeAmountButton(button);
// //       }
// //       // else (new > 0 && new != old):
// //       else {
// //         console.log(
// //           "blue button -> old != active and old != 0 and active != 0"
// //         );
// //         changeButtonToUpdateAmountButton(button);
// //       }
// //     }
// //   };

// //   const updateAmount = async (barcode) => {
// //     // if the new amount is 0 -> alert "delete from cart" and return:

// //     if (productAmounts[barcode] === 0 || !productAmounts[barcode]) {
// //       const button = document.querySelector(`#add-to-cart-${barcode}`);
// //       // gray button:
// //       console.log("gray button");
// //       changeButtonToNoChangeAmountButton(button);
// //       const response = await deleteProductFromCart(userId, barcode);
// //       console.log(response);
// //       await loadCart(userId);

// //       // update the oldProductAmounts:
// //       setOldProductAmounts({
// //         ...oldProductAmounts,
// //         [barcode]: productAmounts[barcode] || 0,
// //       });
// //       console.log("updated oldProductAmounts");
// //       return;
// //     }

// //     // case the old amount is 0 -> add to cart:

// //     if (!oldProductAmounts[barcode]) {
// //       // add to cart:
// //       const button = document.querySelector(`#add-to-cart-${barcode}`);
// //       // gray button:
// //       console.log("gray button");
// //       changeButtonToNoChangeAmountButton(button);
// //       const response = await addProductToCart(
// //         userId,
// //         barcode,
// //         productAmounts[barcode] || 0
// //       );
// //       console.log(response);
// //       await loadCart(userId);

// //       // update the oldProductAmounts:
// //       setOldProductAmounts({
// //         ...oldProductAmounts,
// //         [barcode]: productAmounts[barcode] || 0,
// //       });
// //       console.log("updated oldProductAmounts");
// //       return;
// //     }

// //     const button = document.querySelector(`#add-to-cart-${barcode}`);
// //     // gray button:
// //     console.log("gray button");
// //     changeButtonToNoChangeAmountButton(button);
// //     const response = await updateProductInCart(
// //       userId,
// //       barcode,
// //       productAmounts[barcode] || 0
// //     );
// //     console.log(response);
// //     await loadCart(userId);

// //     // update the oldProductAmounts:
// //     setOldProductAmounts({
// //       ...oldProductAmounts,
// //       [barcode]: productAmounts[barcode] || 0,
// //     });
// //     console.log("updated oldProductAmounts");
// //   };

// //   const filteredProducts = products.filter(
// //     (product) => product.category === activeCategory
// //   );
// //   return (
// //     <div className="list__product-list">
// //       <CategoryNavigation />
// //       <div className="list__products-wrapper">
// //         <div
// //           className="list__products-container"
// //           style={containerStyle}
// //           onTouchStart={handleTouchStart}
// //           onTouchMove={handleTouchMove}
// //           onTouchEnd={handleTouchEnd} // Added onTouchEnd event
// //         >
// //           {filteredProducts.map((product) => (
// //             <div className="list__product-card" key={product.barcode}>
// //               {product.price && product.price.discount && (
// //                 <div className="list__product-badge">מבצע</div>
// //               )}
// //               <div className="list__product-details">
// //                 <div className="list__product-data">
// //                   <div className="list__product-name">
// //                     <p>{max18Characters(product.name)}</p>
// //                   </div>
// //                   <div className="list__product-info">
// //                     <div className="list__product-weight">
// //                       <p>{product.weight}</p>
// //                       <p>{convertWeightUnit(product.unitWeight)}</p>
// //                     </div>
// //                     <div className="list__separator">|</div>
// //                     <div className="list__product-brand">
// //                       <p>{product.brand}</p>
// //                     </div>
// //                   </div>
// //                   <div className="list__product-price">
// //                     <p>{product.price && priceFormat(product.price.price)}</p>
// //                     {product.price && <p style={{ fontSize: "1.4rem" }}>₪</p>}
// //                     {!product.hasPrice && <p>מחיר לא זמין בסופר</p>}
// //                   </div>
// //                   <div className="discount-price">
// //                     {product.price && product.price.discount && (
// //                       <>{discountPriceFormat(product.price)}</>
// //                     )}
// //                   </div>
// //                 </div>
// //                 <div
// //                   className="list__product-image"
// //                   onClick={() => moveToPriceList(product.barcode)}
// //                 >
// //                   <Image barcode={product.barcode} />
// //                 </div>
// //               </div>
// //               <div className="list__product-operations">
// //                 <div
// //                   id={`add-to-cart-${product.barcode}`}
// //                   className="list__product-operations__confirm"
// //                   onClick={(e) => {
// //                     e.stopPropagation();
// //                     updateAmount(product.barcode);
// //                   }}
// //                 >
// //                   אין שינוי
// //                 </div>
// //                 <div
// //                   className="list__product-operations__add"
// //                   onClick={(e) => {
// //                     e.stopPropagation();
// //                     incrementAmount(product.barcode);
// //                   }}
// //                 >
// //                   +
// //                 </div>
// //                 <div className="list__product-operations__quantity">
// //                   <span>{productAmounts[product.barcode] || 0}</span>
// //                 </div>
// //                 <div
// //                   className="list__product-operations__reduce"
// //                   onClick={(e) => {
// //                     e.stopPropagation();
// //                     decrementAmount(product.barcode);
// //                   }}
// //                 >
// //                   -
// //                 </div>
// //               </div>
// //             </div>
// //           ))}
// //         </div>
// //       </div>
// //     </div>
// //   );
// // }

// // export default ProductsList;

// //===========================================================================
// //===========================================================================

// // import React, { useEffect, useRef, useState } from "react";
// // import { useProducts } from "../../context/ProductContext";
// // import { useCart } from "../../context/CartContext";
// // import "./ProductsList.css";
// // import { useNavigate } from "react-router";
// // import {
// //   updateProductInCart,
// //   addProductToCart,
// //   deleteProductFromCart,
// // } from "../../network/cartService";
// // import Image from "./Images";
// // import CategoryNavigation from "./CategoryNavigation";
// // import SubCategoryNavigation from "./SubCategoryNavigation"; // חדש

// // // פונקציות עזר כבעבר
// // export const convertWeightUnit = (weightUnit) => {
// //   weightUnit = weightUnit.toLowerCase();
// //   if (weightUnit === "g") {
// //     return "גרם";
// //   }
// //   if (weightUnit === "kg") {
// //     return 'ק"ג';
// //   }
// //   if (weightUnit === "ml") {
// //     return 'מ"ל';
// //   }
// //   if (weightUnit === "l") {
// //     return "ליטר";
// //   }
// //   if (weightUnit === "u") {
// //     return "יחידות";
// //   }
// //   return weightUnit;
// // };

// // const max18Characters = (str) => {
// //   if (!str) return "";
// //   if (str.length > 23) {
// //     return "..." + str.substring(0, 21);
// //   }
// //   return str;
// // };

// // const priceFormat = (price) => {
// //   return price.toFixed(2);
// // };

// // const discountPriceFormat = (price) => {
// //   const units = price.discount.units;
// //   const totalPrice = price.discount.totalPrice;
// //   return (
// //     <div
// //       className="list__discount-price"
// //       style={{
// //         display: "flex",
// //         flexDirection: "row-reverse",
// //         alignItems: "center",
// //         color: "#ff0000",
// //         fontWeight: "bold",
// //       }}
// //     >
// //       <p style={{ marginLeft: "0.3rem" }}>{units}</p>
// //       <p>{"יחידות ב"}</p>
// //       <p>{" - "}</p>
// //       <p>{priceFormat(totalPrice)}</p>
// //       <p style={{ fontWeight: "bold" }}>{"₪"}</p>
// //     </div>
// //   );
// // };

// // // שינוי מצב הכפתור (CSS) בהתאם
// // const makeVisible = (button) => {
// //   button.classList.add("visible");
// // };

// // const makeInvisible = (button) => {
// //   button.classList.remove("visible");
// // };

// // const changeButtonToAddProductButton = (button) => {
// //   button.style.backgroundColor = "#00c200";
// //   makeVisible(button);
// //   button.innerText = "הוסף לסל";
// // };

// // const changeButtonToNoChangeAmountButton = (button) => {
// //   makeInvisible(button);
// // };

// // const changeButtonToUpdateAmountButton = (button) => {
// //   button.style.backgroundColor = "#008cba";
// //   makeVisible(button);
// //   button.innerText = "עדכן כמות";
// // };

// // const changeButtonToDeleteProductButton = (button) => {
// //   button.style.backgroundColor = "#ff0000";
// //   makeVisible(button);
// //   button.innerText = "הסר מהסל";
// // };

// // function ProductsList() {
// //   const {
// //     products,
// //     allCategories,
// //     all_sub_categories,
// //     activeCategoryIndex,
// //     setActiveCategoryIndex,
// //     activeSubCategoryIndex,
// //     setActiveSubCategoryIndex,
// //     // ...
// //   } = useProducts();

// //   const { getProductsAmountInCart, loadCart } = useCart();

// //   const [productAmounts, setProductAmounts] = useState({});
// //   const [oldProductAmounts, setOldProductAmounts] = useState({});
// //   const [isLoadData, setIsLoadData] = useState(false);
// //   const userId = "1"; // החלף למזהה משתמש אמיתי

// //   const nav = useNavigate();

// //   const [containerStyle, setContainerStyle] = useState({});
// //   const startTouch = useRef({ x: 0 });
// //   const swipeDirection = useRef(null);

// //   // טעינת כמויות מהמיני-DB של הסל (כמו שהיה אצלך)
// //   useEffect(() => {
// //     const loadAmounts = async () => {
// //       setIsLoadData(true);
// //       const amounts = await getProductsAmountInCart(userId);
// //       const amountsObject = {};
// //       amounts.cart.products.forEach((p) => {
// //         amountsObject[p.barcode] = p.amount;
// //       });
// //       setProductAmounts(amountsObject);
// //       setOldProductAmounts(amountsObject);
// //       setIsLoadData(false);
// //     };
// //     loadAmounts();
// //   }, [getProductsAmountInCart, userId]);

// //   if (isLoadData) {
// //     return <div>Loading Amounts...</div>;
// //   }

// //   // Events של הנגיעה (Swipe):
// //   const handleTouchStart = (event) => {
// //     const x = event.touches[0].clientX;
// //     startTouch.current = { x };
// //     swipeDirection.current = null;
// //     setContainerStyle({});
// //   };

// //   const handleTouchMove = (event) => {
// //     const moveX = event.touches[0].clientX;
// //     const deltaX = moveX - startTouch.current.x;

// //     if (Math.abs(deltaX) > 150) {
// //       swipeDirection.current = deltaX > 0 ? "right" : "left";
// //     }
// //   };

// //   /**
// //    * כאן מממשים את לוגיקת ההחלקה:
// //    * - אם swiped left: עוברים לתת־קטגוריה הבאה (אם יש), או לקטגוריה הבאה.
// //    * - אם swiped right: עוברים לתת־קטגוריה הקודמת (אם יש), או לקטגוריה הקודמת.
// //    */
// //   const handleTouchEnd = () => {
// //     // כמה קטגוריות יש בסה"כ
// //     const totalCategories = allCategories.length;
// //     // תתי־קטגוריות של הקטגוריה הנוכחית
// //     const subCats = all_sub_categories[activeCategoryIndex] || [];
// //     const totalSubCats = subCats.length;

// //     if (swipeDirection.current === "right") {
// //       // swipe right -> הולכים לתת־קטגוריה קודמת אם אפשר
// //       if (activeSubCategoryIndex > 0) {
// //         // יש עוד תתי־קטגוריה אחורה
// //         setActiveSubCategoryIndex(activeSubCategoryIndex - 1);

// //         // אנימציית המעבר (לדוגמה) - אתה יכול להתאים
// //         setContainerStyle({ animation: "middleToRight 0.2s ease" });
// //         setTimeout(() => {
// //           setContainerStyle({ animation: "rightToMiddle 0.3s ease" });
// //         }, 200);
// //       } else {
// //         // הגענו להתחלת התתי־קטגוריות, עוברים לקטגוריה הקודמת (wrap around אם צריך)
// //         const prevIndex =
// //           (activeCategoryIndex - 1 + totalCategories) % totalCategories;
// //         setActiveCategoryIndex(prevIndex);
// //         // נעבור לתת־קטגוריה האחרונה של הקטגוריה הקודמת
// //         const prevSub = all_sub_categories[prevIndex] || [];
// //         setActiveSubCategoryIndex(prevSub.length > 0 ? prevSub.length - 1 : 0);

// //         // אנימציות
// //         setContainerStyle({ animation: "middleToRight 0.2s ease" });
// //         // ואז קפיצה
// //         setTimeout(() => {
// //           setContainerStyle({ animation: "rightToLeft 1ms steps(1) forwards" });
// //         }, 200);
// //         // ואז חזרה
// //         setTimeout(() => {
// //           setContainerStyle({ animation: "leftToMiddle 0.3s ease" });
// //         }, 201);
// //       }

// //       // גלילה מעלה
// //       window.scrollTo(0, 0);
// //     } else if (swipeDirection.current === "left") {
// //       // swipe left -> הולכים לתת־קטגוריה הבאה אם אפשר
// //       if (activeSubCategoryIndex < totalSubCats - 1) {
// //         setActiveSubCategoryIndex(activeSubCategoryIndex + 1);

// //         // אנימציה
// //         setContainerStyle({ animation: "middleToLeft 0.2s ease" });
// //         setTimeout(() => {
// //           setContainerStyle({ animation: "leftToMiddle 0.3s ease" });
// //         }, 200);
// //       } else {
// //         // אין עוד תתי־קטגוריות, נעבור לקטגוריה הבאה (wrap-around)
// //         const nextIndex = (activeCategoryIndex + 1) % totalCategories;
// //         setActiveCategoryIndex(nextIndex);
// //         setActiveSubCategoryIndex(0);

// //         // אנימציות
// //         setContainerStyle({ animation: "middleToLeft 0.2s ease" });
// //         setTimeout(() => {
// //           setContainerStyle({ animation: "leftToRight 1ms steps(1) forwards" });
// //         }, 200);
// //         setTimeout(() => {
// //           setContainerStyle({ animation: "rightToMiddle 0.3s ease" });
// //         }, 201);
// //       }

// //       window.scrollTo(0, 0);
// //     } else {
// //       // אין שינוי בכיוון
// //       setContainerStyle({});
// //     }
// //   };

// //   // מעבר לעמוד של מחיר לפי ברקוד
// //   const moveToPriceList = (productBarcode) => {
// //     nav(`/priceList/${productBarcode}`);
// //   };

// //   // הוספה/הורדה של כמות בסל
// //   const incrementAmount = (barcode) => {
// //     const newAmount = (productAmounts[barcode] || 0) + 1;
// //     const button = document.querySelector(`#add-to-cart-${barcode}`);
// //     setProductAmounts({
// //       ...productAmounts,
// //       [barcode]: newAmount,
// //     });

// //     if (!oldProductAmounts[barcode]) {
// //       // בעבר לא היה בסל
// //       changeButtonToAddProductButton(button);
// //     } else {
// //       // כבר היה בסל
// //       if (newAmount === 0) {
// //         changeButtonToDeleteProductButton(button);
// //       } else if (newAmount === oldProductAmounts[barcode]) {
// //         changeButtonToNoChangeAmountButton(button);
// //       } else {
// //         changeButtonToUpdateAmountButton(button);
// //       }
// //     }
// //   };

// //   const decrementAmount = (barcode) => {
// //     const newAmount = Math.max(0, (productAmounts[barcode] || 0) - 1);
// //     const button = document.querySelector(`#add-to-cart-${barcode}`);
// //     setProductAmounts({
// //       ...productAmounts,
// //       [barcode]: newAmount,
// //     });

// //     if (!oldProductAmounts[barcode]) {
// //       // לא היה בסל
// //       if (newAmount === 0) {
// //         changeButtonToNoChangeAmountButton(button);
// //       } else {
// //         changeButtonToAddProductButton(button);
// //       }
// //     } else {
// //       // כבר היה בסל
// //       if (newAmount === 0) {
// //         changeButtonToDeleteProductButton(button);
// //       } else if (newAmount === oldProductAmounts[barcode]) {
// //         changeButtonToNoChangeAmountButton(button);
// //       } else {
// //         changeButtonToUpdateAmountButton(button);
// //       }
// //     }
// //   };

// //   // כשלוחצים על כפתור "הוסף לסל"/"עדכן כמות"/"הסר מהסל" בפועל
// //   const updateAmount = async (barcode) => {
// //     const amount = productAmounts[barcode] || 0;
// //     const button = document.querySelector(`#add-to-cart-${barcode}`);

// //     // אם הכמות החדשה 0 => הסרה מהסל
// //     if (amount === 0) {
// //       changeButtonToNoChangeAmountButton(button);
// //       const response = await deleteProductFromCart(userId, barcode);
// //       console.log(response);
// //       await loadCart(userId);
// //       // עדכון הכמות הישנה
// //       setOldProductAmounts({ ...oldProductAmounts, [barcode]: 0 });
// //       return;
// //     }

// //     // אם בעבר לא היה (old=0) => הוספה
// //     if (!oldProductAmounts[barcode]) {
// //       changeButtonToNoChangeAmountButton(button);
// //       const response = await addProductToCart(userId, barcode, amount);
// //       console.log(response);
// //       await loadCart(userId);
// //       setOldProductAmounts({ ...oldProductAmounts, [barcode]: amount });
// //       return;
// //     }

// //     // אחרת => עדכון כמות
// //     changeButtonToNoChangeAmountButton(button);
// //     const response = await updateProductInCart(userId, barcode, amount);
// //     console.log(response);
// //     await loadCart(userId);
// //     setOldProductAmounts({ ...oldProductAmounts, [barcode]: amount });
// //   };

// //   // קובעים את הקטגוריה ותת־הקטגוריה הנוכחית
// //   const currentCategory = allCategories[activeCategoryIndex];
// //   const subCats = all_sub_categories[activeCategoryIndex] || [];
// //   const currentSubCategory = subCats[activeSubCategoryIndex];

// //   // סינון לפי הקטגוריה ותת־הקטגוריה הנוכחית
// //   const filteredProducts = products.filter((product) => {
// //     if (product.category !== currentCategory) return false;
// //     // במידה והמוצר מכיל subCategory, משווים:
// //     if (currentSubCategory) {
// //       return product.subcategory === currentSubCategory;
// //     }
// //     return true;
// //   });

// //   return (
// //     <div className="list__product-list">
// //       {/* ניווט ראשי בקטגוריות */}
// //       <CategoryNavigation />
// //       {/* ניווט בתתי־קטגוריות */}
// //       <SubCategoryNavigation />

// //       <div className="list__products-wrapper">
// //         <div
// //           className="list__products-container"
// //           style={containerStyle}
// //           onTouchStart={handleTouchStart}
// //           onTouchMove={handleTouchMove}
// //           onTouchEnd={handleTouchEnd}
// //         >
// //           {filteredProducts.map((product) => (
// //             <div className="list__product-card" key={product.barcode}>
// //               {product.price && product.price.discount && (
// //                 <div className="list__product-badge">מבצע</div>
// //               )}
// //               <div className="list__product-details">
// //                 <div className="list__product-data">
// //                   <div className="list__product-name">
// //                     <p>{max18Characters(product.name)}</p>
// //                   </div>
// //                   <div className="list__product-info">
// //                     <div className="list__product-weight">
// //                       <p>{product.weight}</p>
// //                       <p>{convertWeightUnit(product.unitWeight)}</p>
// //                     </div>
// //                     <div className="list__separator">|</div>
// //                     <div className="list__product-brand">
// //                       <p>{product.brand}</p>
// //                     </div>
// //                   </div>
// //                   <div className="list__product-price">
// //                     {product.price ? (
// //                       <>
// //                         <p>{priceFormat(product.price.price)}</p>
// //                         <p style={{ fontSize: "1.4rem" }}>₪</p>
// //                       </>
// //                     ) : (
// //                       <p>מחיר לא זמין בסופר</p>
// //                     )}
// //                   </div>
// //                   <div className="discount-price">
// //                     {product.price && product.price.discount && (
// //                       <>{discountPriceFormat(product.price)}</>
// //                     )}
// //                   </div>
// //                 </div>
// //                 <div
// //                   className="list__product-image"
// //                   onClick={() => moveToPriceList(product.barcode)}
// //                 >
// //                   <Image barcode={product.barcode} />
// //                 </div>
// //               </div>
// //               <div className="list__product-operations">
// //                 <div
// //                   id={`add-to-cart-${product.barcode}`}
// //                   className="list__product-operations__confirm"
// //                   onClick={(e) => {
// //                     e.stopPropagation();
// //                     updateAmount(product.barcode);
// //                   }}
// //                 >
// //                   אין שינוי
// //                 </div>
// //                 <div
// //                   className="list__product-operations__add"
// //                   onClick={(e) => {
// //                     e.stopPropagation();
// //                     incrementAmount(product.barcode);
// //                   }}
// //                 >
// //                   +
// //                 </div>
// //                 <div className="list__product-operations__quantity">
// //                   <span>{productAmounts[product.barcode] || 0}</span>
// //                 </div>
// //                 <div
// //                   className="list__product-operations__reduce"
// //                   onClick={(e) => {
// //                     e.stopPropagation();
// //                     decrementAmount(product.barcode);
// //                   }}
// //                 >
// //                   -
// //                 </div>
// //               </div>
// //             </div>
// //           ))}
// //         </div>
// //       </div>
// //     </div>
// //   );
// // }

// // export default ProductsList;

// //===========================================================================
// //===========================================================================

// import React, { useEffect, useRef, useState } from "react";
// import { useProducts } from "../../context/ProductContext";
// import { useCart } from "../../context/CartContext";
// import "./ProductsList.css";
// import { useNavigate } from "react-router";
// import {
//   updateProductInCart,
//   addProductToCart,
//   deleteProductFromCart,
// } from "../../network/cartService";

// import Image from "./Images";
// import CategoryNavigation from "./CategoryNavigation";
// import SubCategoryNavigation from "./SubCategoryNavigation"; // מציג תתי־קטגוריות

// // פונקציות עזר
// export const convertWeightUnit = (weightUnit) => {
//   if (!weightUnit) return "";
//   switch (weightUnit.toLowerCase()) {
//     case "g":
//       return "גרם";
//     case "kg":
//       return 'ק"ג';
//     case "ml":
//       return 'מ"ל';
//     case "l":
//       return "ליטר";
//     case "u":
//       return "יחידות";
//     default:
//       return weightUnit;
//   }
// };

// const maxCharacters = (str, maxLen) => {
//   if (!str) return "";
//   return str.length > maxLen ? "..." + str.substring(0, maxLen - 3) : str;
// };

// const priceFormat = (price) => price.toFixed(2);

// const discountPriceFormat = (price) => {
//   const { units, totalPrice } = price.discount;
//   return (
//     <div
//       className="list__discount-price"
//       style={{
//         display: "flex",
//         flexDirection: "row-reverse",
//         alignItems: "center",
//         color: "#ff0000",
//         fontWeight: "bold",
//       }}
//     >
//       <p style={{ marginLeft: "0.3rem" }}>{units}</p>
//       <p>{"יחידות ב"}</p>
//       <p>{" - "}</p>
//       <p>{priceFormat(totalPrice)}</p>
//       <p style={{ fontWeight: "bold" }}>{"₪"}</p>
//     </div>
//   );
// };

// /* שליטה על הכפתור: "הוסף לסל" / "עדכן כמות" / "הסר מהסל" */
// const makeVisible = (button) => {
//   button.classList.add("visible");
// };
// const makeInvisible = (button) => {
//   button.classList.remove("visible");
// };
// const changeButtonToAddProductButton = (button) => {
//   button.style.backgroundColor = "#00c200";
//   makeVisible(button);
//   button.innerText = "הוסף לסל";
// };
// const changeButtonToNoChangeAmountButton = (button) => {
//   makeInvisible(button);
// };
// const changeButtonToUpdateAmountButton = (button) => {
//   button.style.backgroundColor = "#008cba";
//   makeVisible(button);
//   button.innerText = "עדכן כמות";
// };
// const changeButtonToDeleteProductButton = (button) => {
//   button.style.backgroundColor = "#ff0000";
//   makeVisible(button);
//   button.innerText = "הסר מהסל";
// };

// function ProductsList() {
//   const {
//     products,
//     allCategories,
//     all_sub_categories,
//     activeCategoryIndex,
//     setActiveCategoryIndex,
//     activeSubCategoryIndex,
//     setActiveSubCategoryIndex,
//   } = useProducts();

//   const { getProductsAmountInCart, loadCart } = useCart();
//   const nav = useNavigate();

//   // state לניהול כמויות בסל
//   const [productAmounts, setProductAmounts] = useState({});
//   const [oldProductAmounts, setOldProductAmounts] = useState({});
//   const [isLoadData, setIsLoadData] = useState(false);
//   const userId = "1"; // מזהה משתמש לדוגמה

//   // state לשליטה באנימציה (style inline)
//   const [containerStyle, setContainerStyle] = useState({});

//   // כדי לזהות כיוון Swipe
//   const startTouch = useRef({ x: 0 });
//   const swipeDirection = useRef(null);

//   /* טוענים את כמויות המוצרים מהסל (מה-DB שלך) */
//   useEffect(() => {
//     const loadAmounts = async () => {
//       setIsLoadData(true);
//       const amounts = await getProductsAmountInCart(userId);
//       const amountsObject = {};
//       amounts.cart.products.forEach((p) => {
//         amountsObject[p.barcode] = p.amount;
//       });
//       setProductAmounts(amountsObject);
//       setOldProductAmounts(amountsObject);
//       setIsLoadData(false);
//     };
//     loadAmounts();
//   }, [getProductsAmountInCart, userId]);

//   if (isLoadData) return <div>Loading Amounts...</div>;

//   /* זיהוי תחילת מגע */
//   const handleTouchStart = (event) => {
//     swipeDirection.current = null;
//     setContainerStyle({});
//     startTouch.current.x = event.touches[0].clientX;
//   };

//   /* זיהוי החלקה (קביעת כיוון) */
//   const handleTouchMove = (event) => {
//     const moveX = event.touches[0].clientX;
//     const deltaX = moveX - startTouch.current.x;
//     if (Math.abs(deltaX) > 150) {
//       swipeDirection.current = deltaX > 0 ? "right" : "left";
//     }
//   };

//   /**
//    * כשמשחררים את האצבע -> מחליטים האם עוברים לתת-קטגוריה הבאה/קודמת
//    * או (אם אנחנו בסוף/התחלה) -> עוברים לקטגוריה הבאה/קודמת עם אותה אנימציית מעבר
//    * זה בדיוק אותו טריק של האנימציות שעשינו לקטגוריות, פשוט גם מופעל על תתי־קטגוריות.
//    */
//   const handleTouchEnd = () => {
//     const totalCategories = allCategories.length;
//     const subCats = all_sub_categories[activeCategoryIndex] || [];
//     const totalSubCats = subCats.length;

//     if (swipeDirection.current === "right") {
//       /* החלקה ימינה – קודם ננסה ללכת לתת־קטגוריה קודמת */
//       if (activeSubCategoryIndex > 0) {
//         // רק תתי־קטגוריה קודמת
//         setActiveSubCategoryIndex(activeSubCategoryIndex - 1);

//         // אנימציה שגורמת להחלקת הדף הנוכחי לימין והחזרת הדף הבא מהשמאל?
//         // כפי שהיה אצלך למעבר ימינה:
//         setContainerStyle({ animation: "middleToRight 0.2s ease" });
//         setTimeout(() => {
//           setContainerStyle({ animation: "rightToMiddle 0.3s ease" });
//         }, 200);
//       } else {
//         // אין יותר תתי־קטגוריות מאחורינו -> עוברים לקטגוריה הקודמת
//         const prevCatIndex =
//           (activeCategoryIndex - 1 + totalCategories) % totalCategories;
//         setActiveCategoryIndex(prevCatIndex);

//         // תת־קטגוריה אחרונה של הקטגוריה הקודמת
//         const prevSub = all_sub_categories[prevCatIndex] || [];
//         setActiveSubCategoryIndex(prevSub.length > 0 ? prevSub.length - 1 : 0);

//         // הרצף "הישן": middleToRight -> (אחרי 0.2s) rightToLeft -> (אחרי 1ms) leftToMiddle
//         setContainerStyle({ animation: "middleToRight 0.2s ease" });
//         setTimeout(() => {
//           setContainerStyle({ animation: "rightToLeft 1ms steps(1) forwards" });
//         }, 200);
//         setTimeout(() => {
//           setContainerStyle({ animation: "leftToMiddle 0.3s ease" });
//         }, 201);
//       }
//       window.scrollTo(0, 0);
//     } else if (swipeDirection.current === "left") {
//       /* החלקה שמאלה – קודם ננסה ללכת לתת־קטגוריה הבאה */
//       if (activeSubCategoryIndex < totalSubCats - 1) {
//         setActiveSubCategoryIndex(activeSubCategoryIndex + 1);

//         // הרצף "הישן": middleToLeft -> (אחרי 0.2s) leftToMiddle
//         setContainerStyle({ animation: "middleToLeft 0.2s ease" });
//         setTimeout(() => {
//           setContainerStyle({ animation: "leftToMiddle 0.3s ease" });
//         }, 200);
//       } else {
//         // אין עוד תתי־קטגוריות -> קטגוריה הבאה
//         const nextCatIndex = (activeCategoryIndex + 1) % totalCategories;
//         setActiveCategoryIndex(nextCatIndex);
//         setActiveSubCategoryIndex(0);

//         // הרצף "הישן": middleToLeft -> leftToRight -> rightToMiddle
//         setContainerStyle({ animation: "middleToLeft 0.2s ease" });
//         setTimeout(() => {
//           setContainerStyle({ animation: "leftToRight 1ms steps(1) forwards" });
//         }, 200);
//         setTimeout(() => {
//           setContainerStyle({ animation: "rightToMiddle 0.3s ease" });
//         }, 201);
//       }
//       window.scrollTo(0, 0);
//     } else {
//       // לא זוהתה החלקה משמעותית
//       setContainerStyle({});
//     }
//   };

//   // ניווט לעמוד "priceList/:barcode"
//   const moveToPriceList = (barcode) => {
//     nav(`/priceList/${barcode}`);
//   };

//   // הגדלת כמות בסל
//   const incrementAmount = (barcode) => {
//     const newAmount = (productAmounts[barcode] || 0) + 1;
//     const button = document.querySelector(`#add-to-cart-${barcode}`);
//     setProductAmounts({ ...productAmounts, [barcode]: newAmount });

//     if (!oldProductAmounts[barcode]) {
//       changeButtonToAddProductButton(button);
//     } else {
//       if (newAmount === 0) {
//         changeButtonToDeleteProductButton(button);
//       } else if (newAmount === oldProductAmounts[barcode]) {
//         changeButtonToNoChangeAmountButton(button);
//       } else {
//         changeButtonToUpdateAmountButton(button);
//       }
//     }
//   };

//   // הקטנת כמות בסל
//   const decrementAmount = (barcode) => {
//     const newAmount = Math.max(0, (productAmounts[barcode] || 0) - 1);
//     const button = document.querySelector(`#add-to-cart-${barcode}`);
//     setProductAmounts({ ...productAmounts, [barcode]: newAmount });

//     if (!oldProductAmounts[barcode]) {
//       if (newAmount === 0) {
//         changeButtonToNoChangeAmountButton(button);
//       } else {
//         changeButtonToAddProductButton(button);
//       }
//     } else {
//       if (newAmount === 0) {
//         changeButtonToDeleteProductButton(button);
//       } else if (newAmount === oldProductAmounts[barcode]) {
//         changeButtonToNoChangeAmountButton(button);
//       } else {
//         changeButtonToUpdateAmountButton(button);
//       }
//     }
//   };

//   // כשלוחצים "הוסף לסל"/"עדכן כמות"/"הסר מהסל"
//   const updateAmount = async (barcode) => {
//     const amount = productAmounts[barcode] || 0;
//     const button = document.querySelector(`#add-to-cart-${barcode}`);

//     if (amount === 0) {
//       // הסרה
//       changeButtonToNoChangeAmountButton(button);
//       const response = await deleteProductFromCart(userId, barcode);
//       console.log(response);
//       await loadCart(userId);
//       setOldProductAmounts({ ...oldProductAmounts, [barcode]: 0 });
//       return;
//     }
//     // אם לא היה בסל
//     if (!oldProductAmounts[barcode]) {
//       changeButtonToNoChangeAmountButton(button);
//       const response = await addProductToCart(userId, barcode, amount);
//       console.log(response);
//       await loadCart(userId);
//       setOldProductAmounts({ ...oldProductAmounts, [barcode]: amount });
//       return;
//     }
//     // אחרת, עדכון
//     changeButtonToNoChangeAmountButton(button);
//     const response = await updateProductInCart(userId, barcode, amount);
//     console.log(response);
//     await loadCart(userId);
//     setOldProductAmounts({ ...oldProductAmounts, [barcode]: amount });
//   };

//   // המחרוזת של הקטגוריה הפעילה
//   const currentCategory = allCategories[activeCategoryIndex];
//   // מערך התתי־קטגוריות של הקטגוריה הזו
//   const subCats = all_sub_categories[activeCategoryIndex] || [];
//   // תת־הקטגוריה הנוכחית (כמחרוזת)
//   const currentSubCategory = subCats[activeSubCategoryIndex];

//   // סינון מוצרים
//   const filteredProducts = products.filter((product) => {
//     if (product.category !== currentCategory) return false;
//     if (currentSubCategory) {
//       return product.subcategory === currentSubCategory;
//     }
//     return true;
//   });

//   return (
//     <div className="list__product-list">
//       {/* ניווט הקטגוריות הראשיות */}
//       <CategoryNavigation />
//       {/* ניווט תתי־קטגוריות */}
//       <SubCategoryNavigation />

//       <div className="list__products-wrapper">
//         <div
//           className="list__products-container"
//           style={containerStyle}
//           onTouchStart={handleTouchStart}
//           onTouchMove={handleTouchMove}
//           onTouchEnd={handleTouchEnd}
//         >
//           {filteredProducts.map((product) => (
//             <div className="list__product-card" key={product.barcode}>
//               {/* תגית מבצע אם יש */}
//               {product.price && product.price.discount && (
//                 <div className="list__product-badge">מבצע</div>
//               )}
//               <div className="list__product-details">
//                 <div className="list__product-data">
//                   <div className="list__product-name">
//                     <p>{maxCharacters(product.name, 23)}</p>
//                   </div>
//                   <div className="list__product-info">
//                     <div className="list__product-weight">
//                       <p>{product.weight}</p>
//                       <p>{convertWeightUnit(product.unitWeight)}</p>
//                     </div>
//                     <div className="list__separator">|</div>
//                     <div className="list__product-brand">
//                       <p>{product.brand}</p>
//                     </div>
//                   </div>
//                   <div className="list__product-price">
//                     {product.price ? (
//                       <>
//                         <p>{priceFormat(product.price.price)}</p>
//                         <p style={{ fontSize: "1.4rem" }}>₪</p>
//                       </>
//                     ) : (
//                       <p>מחיר לא זמין בסופר</p>
//                     )}
//                   </div>
//                   <div className="discount-price">
//                     {product.price && product.price.discount && (
//                       <>{discountPriceFormat(product.price)}</>
//                     )}
//                   </div>
//                 </div>
//                 {/* התמונה */}
//                 <div
//                   className="list__product-image"
//                   onClick={() => moveToPriceList(product.barcode)}
//                 >
//                   <Image barcode={product.barcode} />
//                 </div>
//               </div>

//               {/* כפתורי הוספה/הסרה/אישור */}
//               <div className="list__product-operations">
//                 <div
//                   id={`add-to-cart-${product.barcode}`}
//                   className="list__product-operations__confirm"
//                   onClick={(e) => {
//                     e.stopPropagation();
//                     updateAmount(product.barcode);
//                   }}
//                 >
//                   אין שינוי
//                 </div>
//                 <div
//                   className="list__product-operations__add"
//                   onClick={(e) => {
//                     e.stopPropagation();
//                     incrementAmount(product.barcode);
//                   }}
//                 >
//                   +
//                 </div>
//                 <div className="list__product-operations__quantity">
//                   <span>{productAmounts[product.barcode] || 0}</span>
//                 </div>
//                 <div
//                   className="list__product-operations__reduce"
//                   onClick={(e) => {
//                     e.stopPropagation();
//                     decrementAmount(product.barcode);
//                   }}
//                 >
//                   -
//                 </div>
//               </div>
//             </div>
//           ))}
//         </div>
//       </div>
//     </div>
//   );
// }

// export default ProductsList;

//=====================================================================================
//=====================================================================================
//=====================================================================================

import React, { useEffect, useRef, useState } from "react";
import { useProducts } from "../../context/ProductContext";
import { useCart } from "../../context/CartContext";
import "./ProductsList.css";
import { useNavigate } from "react-router";
import {
  updateProductInCart,
  addProductToCart,
  deleteProductFromCart,
} from "../../network/cartService";
import {
  // getAllAlternativeProducts,
  getAlternativeProductByBarcode,
  createAlternativeProduct,
  // updateAllAlternativeProducts,
  updateAlternativeProductByBarcode,
} from "../../network/alternative-productsService";
import Image from "./Images";
import CategoryNavigation from "./CategoryNavigation";
import SubCategoryNavigation from "./SubCategoryNavigation";

/* -------------------------------- */
/* פונקציות עזר (אינן משתנות)      */
/* -------------------------------- */
export const convertWeightUnit = (weightUnit) => {
  if (!weightUnit) return "";
  switch (weightUnit.toLowerCase()) {
    case "g":
      return "גרם";
    case "kg":
      return 'ק"ג';
    case "ml":
      return 'מ"ל';
    case "l":
      return "ליטר";
    case "u":
      return "יחידות";
    default:
      return weightUnit;
  }
};

const maxCharacters = (str, maxLen) => {
  if (!str) return "";
  return str.length > maxLen ? "..." + str.substring(0, maxLen - 3) : str;
};

const priceFormat = (price) => price.toFixed(2);

const discountPriceFormat = (price) => {
  const { units, totalPrice } = price.discount;
  return (
    <div
      className="list__discount-price"
      style={{
        display: "flex",
        flexDirection: "row-reverse",
        alignItems: "center",
        color: "#ff0000",
        fontWeight: "bold",
      }}
    >
      <p style={{ marginLeft: "0.3rem" }}>{units}</p>
      <p>{"יחידות ב"}</p>
      <p>{" - "}</p>
      <p>{priceFormat(totalPrice)}</p>
      <p style={{ fontWeight: "bold" }}>{"₪"}</p>
    </div>
  );
};

/* כפתורי הוספה/הורדה/אישור/מחיקה לסל */
const makeVisible = (button) => {
  button.classList.add("visible");
};
const makeInvisible = (button) => {
  button.classList.remove("visible");
};
const changeButtonToAddProductButton = (button) => {
  button.style.backgroundColor = "#00c200";
  makeVisible(button);
  button.innerText = "הוסף לסל";
};
const changeButtonToNoChangeAmountButton = (button) => {
  makeInvisible(button);
};
const changeButtonToUpdateAmountButton = (button) => {
  button.style.backgroundColor = "#008cba";
  makeVisible(button);
  button.innerText = "עדכן כמות";
};
const changeButtonToDeleteProductButton = (button) => {
  button.style.backgroundColor = "#ff0000";
  makeVisible(button);
  button.innerText = "הסר מהסל";
};

// const OpenBarcode = (barcode) => {
//   console.log("Open " + barcode);
// };

// const CloseBarcode = (barcode) => {
//   console.log("Close" + barcode);
// };

/* -------------------------------- */
/*       ProductsList component     */
/* -------------------------------- */
function ProductsList() {
  const {
    products, // יש
    allCategories, // יש
    all_sub_categories,
    activeCategoryIndex,
    setActiveCategoryIndex,
    activeSubCategoryIndex,
    setActiveSubCategoryIndex,
  } = useProducts();

  const { getProductsAmountInCart, loadCart } = useCart();
  const nav = useNavigate();


  const [productAmounts, setProductAmounts] = useState({});
  const [oldProductAmounts, setOldProductAmounts] = useState({});
  const [isLoadData, setIsLoadData] = useState(false);

  // =================================================================================
  const [selectedBarcode, setSelectedBarcode] = useState(null); // הברקוד הנבחר
  const [groupData, setGroupData] = useState({}); // אובייקט הברקודים לקבוצה
  // =================================================================================

  const handleOpenBarcode = async (barcode) => {
    if (selectedBarcode === null) {
      // אם אין ברקוד נבחר -> מעבר למצב עריכה
      setSelectedBarcode(barcode);

      try {
        const response = await getAlternativeProductByBarcode(barcode);
        if (response?.data?.alternativeProduct) {
          setGroupData({
            [barcode]: response.data.alternativeProduct.alternatives,
          });
        } else {
          setGroupData({ [barcode]: [] });
        }
      } catch (error) {
        console.error("Error fetching alternative product:", error);
        setGroupData({ [barcode]: [] });
      }
    }
  };

  const handleToggleAlternative = (barcode) => {
    if (!selectedBarcode) return;

    setGroupData((prevData) => {
      const currentAlternatives = prevData[selectedBarcode] || [];

      if (currentAlternatives.includes(barcode)) {
        // אם הברקוד כבר קיים -> הסרה מהרשימה
        return {
          ...prevData,
          [selectedBarcode]: currentAlternatives.filter(
            (item) => item !== barcode
          ),
        };
      } else {
        // אם הברקוד לא קיים -> הוספה לרשימה
        return {
          ...prevData,
          [selectedBarcode]: [...currentAlternatives, barcode],
        };
      }
    });
  };

  const handleCloseBarcode = async (barcode) => {
    if (selectedBarcode === barcode) {
      console.log("Saving group:", groupData);

      try {
        const existingAlternative = await getAlternativeProductByBarcode(
          barcode
        );

        if (existingAlternative?.data?.alternativeProduct) {
          await updateAlternativeProductByBarcode(barcode, groupData[barcode]);
        } else {
          await createAlternativeProduct(barcode, groupData[barcode]);
        }
      } catch (error) {
        console.error("Error updating alternative product:", error);
      }

      // יציאה ממצב עריכה
      setSelectedBarcode(null);
      setGroupData({});
    }
  };

  const userId = "1"; // מזהה משתמש (דוגמה)

  /* כאן נשמור את ה-inline style שנחיל על ה-container (כדי ליצור אנימציות) */
  const [containerStyle, setContainerStyle] = useState({});

  /* refs לזיהוי כיוון Swipe */
  const startTouch = useRef({ x: 0 });
  const swipeDirection = useRef(null);

  /* -------------------------------- */
  /* טעינת כמות מוצרים מהסל          */
  /* -------------------------------- */
  useEffect(() => {
    const loadAmounts = async () => {
      setIsLoadData(true);
      const amounts = await getProductsAmountInCart(userId);
      const amountsObject = {};
      amounts.cart.products.forEach((p) => {
        amountsObject[p.barcode] = p.amount;
      });
      setProductAmounts(amountsObject);
      setOldProductAmounts(amountsObject);
      setIsLoadData(false);
    };
    loadAmounts();
  }, [getProductsAmountInCart, userId]);

  if (isLoadData) {
    return <div>Loading Amounts...</div>;
  }

  /* -------------------------------- */
  /* זיהוי תחילת נגיעה והחלקה         */
  /* -------------------------------- */
  const handleTouchStart = (event) => {
    swipeDirection.current = null;
    setContainerStyle({});
    startTouch.current.x = event.touches[0].clientX;
  };

  const handleTouchMove = (event) => {
    const moveX = event.touches[0].clientX;
    const deltaX = moveX - startTouch.current.x;
    if (Math.abs(deltaX) > 150) {
      swipeDirection.current = deltaX > 0 ? "right" : "left";
    }
  };

  /**
   * פונקציות עזר להפעלת "המעבר המשולש" (3 שלבים) שהשתמשת בהם בקטגוריות:
   * 1) middleToX
   * 2) XToY ב-1ms
   * 3) YToMiddle
   */
  const animateLeft = () => {
    // הדף זז שמאלה
    setContainerStyle({ animation: "middleToLeft 0.2s ease" });
    setTimeout(() => {
      // קפיצה לימין
      setContainerStyle({
        animation: "leftToRight 1ms steps(1) forwards",
      });
    }, 200);
    setTimeout(() => {
      // כניסה מימין לאמצע
      setContainerStyle({ animation: "rightToMiddle 0.3s ease" });
    }, 201);
  };

  const animateRight = () => {
    // הדף זז ימינה
    setContainerStyle({ animation: "middleToRight 0.2s ease" });
    setTimeout(() => {
      // קפיצה לשמאל
      setContainerStyle({
        animation: "rightToLeft 1ms steps(1) forwards",
      });
    }, 200);
    setTimeout(() => {
      // כניסה משמאל לאמצע
      setContainerStyle({ animation: "leftToMiddle 0.3s ease" });
    }, 201);
  };

  /* -------------------------------- */
  /* כשמשחררים האצבע -> מעבר תתי־קטגוריה/קטגוריה */
  /* -------------------------------- */
  const handleTouchEnd = () => {
    const totalCategories = allCategories.length;
    const subCats = all_sub_categories[activeCategoryIndex] || [];
    const totalSubCats = subCats.length;

    if (swipeDirection.current === "right") {
      // החלקה ימינה
      if (activeSubCategoryIndex > 0) {
        // יש תתי־קטגוריה קודמת => פשוט מפחיתים באחד
        setActiveSubCategoryIndex(activeSubCategoryIndex - 1);
        // אנימציה משולשת (כמו בקטגוריות)
        animateRight();
      } else {
        // wrap-around לקטגוריה הקודמת
        const prevIndex =
          (activeCategoryIndex - 1 + totalCategories) % totalCategories;
        setActiveCategoryIndex(prevIndex);

        // קובעים את תת־הקטגוריה האחרונה של הקטגוריה הקודמת
        const prevSub = all_sub_categories[prevIndex] || [];
        setActiveSubCategoryIndex(prevSub.length ? prevSub.length - 1 : 0);

        // אנימציה משולשת
        animateRight();
      }
      window.scrollTo(0, 0);
    } else if (swipeDirection.current === "left") {
      // החלקה שמאלה
      if (activeSubCategoryIndex < totalSubCats - 1) {
        // יש עוד תתי־קטגוריות => מוסיפים 1
        setActiveSubCategoryIndex(activeSubCategoryIndex + 1);
        // אנימציה
        animateLeft();
      } else {
        // wrap-around לקטגוריה הבאה
        const nextIndex = (activeCategoryIndex + 1) % totalCategories;
        setActiveCategoryIndex(nextIndex);
        setActiveSubCategoryIndex(0);

        // אנימציה
        animateLeft();
      }
      window.scrollTo(0, 0);
    } else {
      // לא הייתה החלקה
      setContainerStyle({});
    }
  };

  /* מעבר לעמוד מחיר */
  const moveToPriceList = (barcode) => {
    nav(`/priceList/${barcode}`);
  };

  /* הוספה לסל */
  const incrementAmount = (barcode) => {
    const newAmount = (productAmounts[barcode] || 0) + 1;
    const button = document.querySelector(`#add-to-cart-${barcode}`);
    setProductAmounts({ ...productAmounts, [barcode]: newAmount });

    if (!oldProductAmounts[barcode]) {
      changeButtonToAddProductButton(button);
    } else {
      if (newAmount === 0) {
        changeButtonToDeleteProductButton(button);
      } else if (newAmount === oldProductAmounts[barcode]) {
        changeButtonToNoChangeAmountButton(button);
      } else {
        changeButtonToUpdateAmountButton(button);
      }
    }
  };

  /* הורדה מהסל */
  const decrementAmount = (barcode) => {
    const newAmount = Math.max(0, (productAmounts[barcode] || 0) - 1);
    const button = document.querySelector(`#add-to-cart-${barcode}`);
    setProductAmounts({ ...productAmounts, [barcode]: newAmount });

    if (!oldProductAmounts[barcode]) {
      if (newAmount === 0) {
        changeButtonToNoChangeAmountButton(button);
      } else {
        changeButtonToAddProductButton(button);
      }
    } else {
      if (newAmount === 0) {
        changeButtonToDeleteProductButton(button);
      } else if (newAmount === oldProductAmounts[barcode]) {
        changeButtonToNoChangeAmountButton(button);
      } else {
        changeButtonToUpdateAmountButton(button);
      }
    }
  };

  /* כשלוחצים על הכפתור (הוסף/עדכן/מחק) */
  const updateAmount = async (barcode) => {
    const amount = productAmounts[barcode] || 0;
    const button = document.querySelector(`#add-to-cart-${barcode}`);

    if (amount === 0) {
      // מחיקה
      changeButtonToNoChangeAmountButton(button);
      await deleteProductFromCart(userId, barcode);
      await loadCart(userId);
      setOldProductAmounts({ ...oldProductAmounts, [barcode]: 0 });
      return;
    }

    // אם לא היה בסל - הוספה
    if (!oldProductAmounts[barcode]) {
      changeButtonToNoChangeAmountButton(button);
      await addProductToCart(userId, barcode, amount);
      await loadCart(userId);
      setOldProductAmounts({ ...oldProductAmounts, [barcode]: amount });
      return;
    }

    // אחרת - עדכון
    changeButtonToNoChangeAmountButton(button);
    await updateProductInCart(userId, barcode, amount);
    await loadCart(userId);
    setOldProductAmounts({ ...oldProductAmounts, [barcode]: amount });
  };

  /* סינון מוצרים לפי קטגוריה ותת־קטגוריה פעילים */
  const currentCategory = allCategories[activeCategoryIndex];
  const subCats = all_sub_categories[activeCategoryIndex] || [];
  const currentSubCategory = subCats[activeSubCategoryIndex];

  const filteredProducts = products.filter((product) => {
    if (product.category !== currentCategory) return false;
    if (currentSubCategory) {
      return product.subcategory === currentSubCategory;
    }
    return true;
  });

  return (
    <div className="list__product-list">
      {/* ניווט הקטגוריות */}
      <CategoryNavigation />
      {/* ניווט תתי־קטגוריות */}
      <SubCategoryNavigation />

      <div className="list__products-wrapper">
        <div
          className="list__products-container"
          style={containerStyle}
          onTouchStart={handleTouchStart}
          onTouchMove={handleTouchMove}
          onTouchEnd={handleTouchEnd}
        >
          {filteredProducts.map((product) => (
            <div className="list__product-card" key={product.barcode}>
              {product.price && product.price.discount && (
                <div className="list__product-badge">מבצע</div>
              )}
              <div className="list__product-details">
                <div className="list__product-data">
                  <div className="list__product-name">
                    <p>{maxCharacters(product.name, 23)}</p>
                  </div>
                  <div className="list__product-info">
                    <div className="list__product-weight">
                      <p>{product.weight}</p>
                      <p>{convertWeightUnit(product.unitWeight)}</p>
                    </div>
                    <div className="list__separator">|</div>
                    <div className="list__product-brand">
                      <p>{product.brand}</p>
                    </div>
                  </div>
                  <div className="list__product-price">
                    {product.price ? (
                      <>
                        <p>{priceFormat(product.price.price)}</p>
                        <p style={{ fontSize: "1.4rem" }}>₪</p>
                      </>
                    ) : (
                      <p>מחיר לא זמין בסופר</p>
                    )}
                  </div>
                  <div className="discount-price">
                    {product.price && product.price.discount && (
                      <>{discountPriceFormat(product.price)}</>
                    )}
                  </div>
                </div>
                <div
                  className="list__product-image"
                  onClick={() => moveToPriceList(product.barcode)}
                >
                  <Image barcode={product.barcode} />
                </div>
              </div>
              <div className="list__product-operations">
                <div
                  id={`add-to-cart-${product.barcode}`}
                  className="list__product-operations__confirm"
                  onClick={(e) => {
                    e.stopPropagation();
                    updateAmount(product.barcode);
                  }}
                >
                  אין שינוי
                </div>
                <div
                  className="list__product-operations__add"
                  onClick={(e) => {
                    e.stopPropagation();
                    incrementAmount(product.barcode);
                  }}
                >
                  +
                </div>
                <div className="list__product-operations__quantity">
                  <span>{productAmounts[product.barcode] || 0}</span>
                </div>
                <div
                  className="list__product-operations__reduce"
                  onClick={(e) => {
                    e.stopPropagation();
                    decrementAmount(product.barcode);
                  }}
                >
                  -
                </div>
                <div>
                  <div>
                    {selectedBarcode === product.barcode ? (
                      <button
                        onClick={() => handleCloseBarcode(product.barcode)}
                        style={{ backgroundColor: "blue", color: "white" }}
                      >
                        Save
                      </button>
                    ) : (
                      <button
                        onClick={() => handleOpenBarcode(product.barcode)}
                        style={{ backgroundColor: "green", color: "white" }}
                      >
                        Open
                      </button>
                    )}

                    {selectedBarcode && selectedBarcode !== product.barcode && (
                      <button
                        onClick={() => handleToggleAlternative(product.barcode)}
                        style={{
                          backgroundColor: groupData[selectedBarcode]?.includes(
                            product.barcode
                          )
                            ? "red"
                            : "green",
                          color: "white",
                        }}
                      >
                        {groupData[selectedBarcode]?.includes(product.barcode)
                          ? "Remove"
                          : "Add"}
                      </button>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default ProductsList;
//=====================================================================================
//=====================================================================================
//=====================================================================================



ProductListManager.js:

// import React, { useEffect, useRef, useState } from "react";
// import { useProducts } from "../../context/ProductContext";
// import { useCart } from "../../context/CartContext";
// import "./ProductsListManager.css";
// import { useNavigate } from "react-router";
// import {
//   updateProductInCart,
//   addProductToCart,
//   deleteProductFromCart,
// } from "../../network/cartService";
// import {
//   getAllAlternativeProducts,
//   getAlternativeProductByBarcode,
//   createAlternativeProduct,
//   updateAlternativeProductByBarcode,
// } from "../../network/alternative-productsService";

// import AlternativeProductsModal from "./AlternativeProductsModal"; // הרכיב החדש

// import Image from "./Images";
// import CategoryNavigation from "./CategoryNavigation";
// import SubCategoryNavigation from "./SubCategoryNavigation";

// /* -------------------------------- */
// /* פונקציות עזר (אינן משתנות)      */
// /* -------------------------------- */
// export const convertWeightUnit = (weightUnit) => {
//   if (!weightUnit) return "";
//   switch (weightUnit.toLowerCase()) {
//     case "g":
//       return "גרם";
//     case "kg":
//       return 'ק"ג';
//     case "ml":
//       return 'מ"ל';
//     case "l":
//       return "ליטר";
//     case "u":
//       return "יחידות";
//     default:
//       return weightUnit;
//   }
// };

// const maxCharacters = (str, maxLen) => {
//   if (!str) return "";
//   return str.length > maxLen ? "..." + str.substring(0, maxLen - 3) : str;
// };

// const priceFormat = (price) => price.toFixed(2);

// const discountPriceFormat = (price) => {
//   const { units, totalPrice } = price.discount;
//   return (
//     <div
//       className="list__discount-price"
//       style={{
//         display: "flex",
//         flexDirection: "row-reverse",
//         alignItems: "center",
//         color: "#ff0000",
//         fontWeight: "bold",
//       }}
//     >
//       <p style={{ marginLeft: "0.3rem" }}>{units}</p>
//       <p>{"יחידות ב"}</p>
//       <p>{" - "}</p>
//       <p>{priceFormat(totalPrice)}</p>
//       <p style={{ fontWeight: "bold" }}>{"₪"}</p>
//     </div>
//   );
// };

// const makeInvisible = (button) => {
//   button.classList.remove("visible");
// };

// const changeButtonToNoChangeAmountButton = (button) => {
//   makeInvisible(button);
// };

// function ProductListManager() {
//   const {
//     products,
//     allCategories,
//     all_sub_categories,
//     activeCategoryIndex,
//     setActiveCategoryIndex,
//     activeSubCategoryIndex,
//     setActiveSubCategoryIndex,
//   } = useProducts();

//   const { getProductsAmountInCart, loadCart } = useCart();
//   const nav = useNavigate();

//   const [productAmounts, setProductAmounts] = useState({});
//   const [oldProductAmounts, setOldProductAmounts] = useState({});
//   const [isLoadData, setIsLoadData] = useState(false);

//   //=================================================================================
//   //               ניהול מוצרים חלופיים
//   //=================================================================================
//   const [allAlternativeProducts, setAllAlternativeProducts] = useState([]);
//   const [selectedBarcode, setSelectedBarcode] = useState(null); // ברקוד שבעריכה
//   const [groupData, setGroupData] = useState({}); // מילון: barcode ראשי -> מערך ברקודים חלופיים

//   useEffect(() => {
//     const loadAlternativeProducts = async () => {
//       const allAlternatives = await getAllAlternativeProducts();
//       setAllAlternativeProducts(allAlternatives);
//     };
//     loadAlternativeProducts();
//   }, []);

//   const hasAlternativeProducts = (barcode) => {
//     // return true if barcode has alternative products and its list is not empty:
//     const alternativeProduct = allAlternativeProducts.find(
//       (item) => item.barcode === barcode
//     );
//     return alternativeProduct && alternativeProduct.alternativesS.length > 0;
//   };

//   // פונקציה להעתקה ושמירה:
// const handleCopyAndSave = async (sourceBarcode) => {
//   try {
//     // 1) נטען מהשרת את רשימת החלופות של sourceBarcode
//     const response = await getAlternativeProductByBarcode(sourceBarcode);
//     // 2) בהנחה שכבר הבטחת שיש לו רשימת חלופות
//     const fromAlternatives = response.data.alternativeProduct.alternatives;

//     // 3) מעדכן את groupData עבור ה-barcode שבעריכה
//     setGroupData((prev) => ({
//       ...prev,
//       [selectedBarcode]: fromAlternatives
//     }));

//     // 4) שומר בשרת עבור selectedBarcode
//     await handleCloseBarcode(selectedBarcode);

//   } catch (error) {
//     console.error("Error copying from source barcode:", error);
//   }
// };

//   // פותח עריכת קבוצה לברקוד מסוים
//   const handleOpenBarcode = async (barcode) => {
//     if (selectedBarcode === null) {
//       setSelectedBarcode(barcode);

//       try {
//         const response = await getAlternativeProductByBarcode(barcode);
//         if (response?.data?.alternativeProduct) {
//           setGroupData({
//             [barcode]: response.data.alternativeProduct.alternatives,
//           });
//         } else {
//           setGroupData({ [barcode]: [] });
//         }
//       } catch (error) {
//         console.error("Error fetching alternative product:", error);
//         setGroupData({ [barcode]: [] });
//       }
//     }
//   };

//   // סוגר עריכת קבוצה ושומר
//   const handleCloseBarcode = async (barcode) => {
//     if (selectedBarcode === barcode) {
//       try {
//         const existingAlternative = await getAlternativeProductByBarcode(barcode);
//         if (existingAlternative?.data?.alternativeProduct) {
//           await updateAlternativeProductByBarcode(barcode, groupData[barcode]);
//         } else {
//           await createAlternativeProduct(barcode, groupData[barcode]);
//         }
//       } catch (error) {
//         console.error("Error updating alternative product:", error);
//       }
//       // יציאה ממצב עריכה
//       setSelectedBarcode(null);
//       setGroupData({});
//     }
//   };

//   // טוגגל - הוספה/הסרה של מוצר לרשימה של ברקוד נבחר
//   const handleToggleAlternative = (barcode) => {
//     if (!selectedBarcode) return;
//     setGroupData((prevData) => {
//       const currentAlternatives = prevData[selectedBarcode] || [];
//       if (currentAlternatives.includes(barcode)) {
//         // הסר
//         return {
//           ...prevData,
//           [selectedBarcode]: currentAlternatives.filter(
//             (item) => item !== barcode
//           ),
//         };
//       } else {
//         // הוסף
//         return {
//           ...prevData,
//           [selectedBarcode]: [...currentAlternatives, barcode],
//         };
//       }
//     });
//   };

//   //=================================================================================
//   // סטייטים לניהול המודאל החדש
//   //=================================================================================
//   const [showModal, setShowModal] = useState(false);
//   const [alternativesToShow, setAlternativesToShow] = useState([]);

//   const handleShowAlternatives = (barcode) => {
//     const altBarcodes = groupData[barcode] || [];
//     setAlternativesToShow(altBarcodes);
//     setShowModal(true);
//   };

//   //=================================================================================
//   const userId = "1"; // מזהה משתמש לדוגמה
//   const [containerStyle, setContainerStyle] = useState({});

//   const startTouch = useRef({ x: 0 });
//   const swipeDirection = useRef(null);

//   // טעינת כמות מוצרים מהסל
//   useEffect(() => {
//     const loadAmounts = async () => {
//       setIsLoadData(true);
//       const amounts = await getProductsAmountInCart(userId);
//       const amountsObject = {};
//       amounts.cart.products.forEach((p) => {
//         amountsObject[p.barcode] = p.amount;
//       });
//       setProductAmounts(amountsObject);
//       setOldProductAmounts(amountsObject);
//       setIsLoadData(false);
//     };
//     loadAmounts();
//   }, [getProductsAmountInCart, userId]);

//   if (isLoadData) {
//     return <div>Loading Amounts...</div>;
//   }

//   // זיהוי החלקה (Swipe) ימין/שמאל
//   const handleTouchStart = (event) => {
//     swipeDirection.current = null;
//     setContainerStyle({});
//     startTouch.current.x = event.touches[0].clientX;
//   };

//   const handleTouchMove = (event) => {
//     const moveX = event.touches[0].clientX;
//     const deltaX = moveX - startTouch.current.x;
//     if (Math.abs(deltaX) > 150) {
//       swipeDirection.current = deltaX > 0 ? "right" : "left";
//     }
//   };

//   const animateLeft = () => {
//     setContainerStyle({ animation: "middleToLeft 0.2s ease" });
//     setTimeout(() => {
//       setContainerStyle({ animation: "leftToRight 1ms steps(1) forwards" });
//     }, 200);
//     setTimeout(() => {
//       setContainerStyle({ animation: "rightToMiddle 0.3s ease" });
//     }, 201);
//   };

//   const animateRight = () => {
//     setContainerStyle({ animation: "middleToRight 0.2s ease" });
//     setTimeout(() => {
//       setContainerStyle({ animation: "rightToLeft 1ms steps(1) forwards" });
//     }, 200);
//     setTimeout(() => {
//       setContainerStyle({ animation: "leftToMiddle 0.3s ease" });
//     }, 201);
//   };

//   const handleTouchEnd = () => {
//     const totalCategories = allCategories.length;
//     const subCats = all_sub_categories[activeCategoryIndex] || [];
//     const totalSubCats = subCats.length;

//     if (swipeDirection.current === "right") {
//       if (activeSubCategoryIndex > 0) {
//         setActiveSubCategoryIndex(activeSubCategoryIndex - 1);
//         animateRight();
//       } else {
//         const prevIndex =
//           (activeCategoryIndex - 1 + totalCategories) % totalCategories;
//         setActiveCategoryIndex(prevIndex);
//         const prevSub = all_sub_categories[prevIndex] || [];
//         setActiveSubCategoryIndex(prevSub.length ? prevSub.length - 1 : 0);
//         animateRight();
//       }
//       window.scrollTo(0, 0);
//     } else if (swipeDirection.current === "left") {
//       if (activeSubCategoryIndex < totalSubCats - 1) {
//         setActiveSubCategoryIndex(activeSubCategoryIndex + 1);
//         animateLeft();
//       } else {
//         const nextIndex = (activeCategoryIndex + 1) % totalCategories;
//         setActiveCategoryIndex(nextIndex);
//         setActiveSubCategoryIndex(0);
//         animateLeft();
//       }
//       window.scrollTo(0, 0);
//     } else {
//       setContainerStyle({});
//     }
//   };

//   // מעבר לעמוד מחיר
//   const moveToPriceList = (barcode) => {
//     nav(`/priceList/${barcode}`);
//   };

//   // עדכון/מחיקה/הוספה לסל
//   const updateAmount = async (barcode) => {
//     const amount = productAmounts[barcode] || 0;
//     const button = document.querySelector(`#add-to-cart-${barcode}`);

//     if (amount === 0) {
//       changeButtonToNoChangeAmountButton(button);
//       await deleteProductFromCart(userId, barcode);
//       await loadCart(userId);
//       setOldProductAmounts({ ...oldProductAmounts, [barcode]: 0 });
//       return;
//     }

//     if (!oldProductAmounts[barcode]) {
//       changeButtonToNoChangeAmountButton(button);
//       await addProductToCart(userId, barcode, amount);
//       await loadCart(userId);
//       setOldProductAmounts({ ...oldProductAmounts, [barcode]: amount });
//       return;
//     }

//     changeButtonToNoChangeAmountButton(button);
//     await updateProductInCart(userId, barcode, amount);
//     await loadCart(userId);
//     setOldProductAmounts({ ...oldProductAmounts, [barcode]: amount });
//   };

//   const currentCategory = allCategories[activeCategoryIndex];
//   const subCats = all_sub_categories[activeCategoryIndex] || [];
//   const currentSubCategory = subCats[activeSubCategoryIndex];

//   const filteredProducts = products.filter((product) => {
//     if (product.category !== currentCategory) return false;
//     if (currentSubCategory) {
//       return product.subcategory === currentSubCategory;
//     }
//     return true;
//   });

//   return (
//     <div className="list__product-list">
//       <CategoryNavigation />
//       <SubCategoryNavigation />

//       <div className="list__products-wrapper">
//         <div
//           className="list__products-container"
//           style={containerStyle}
//           onTouchStart={handleTouchStart}
//           onTouchMove={handleTouchMove}
//           onTouchEnd={handleTouchEnd}
//         >
//           {filteredProducts.map((product) => (
//             <div className="list__product-card" key={product.barcode}>
//               {product.price && product.price.discount && (
//                 <div className="list__product-badge">מבצע</div>
//               )}

//               <div className="list__product-details">
//                 <div className="list__product-data">
//                   <div className="list__product-name">
//                     <p>{maxCharacters(product.name, 23)}</p>
//                   </div>
//                   <div className="list__product-info">
//                     <div className="list__product-weight">
//                       <p>{product.weight}</p>
//                       <p>{convertWeightUnit(product.unitWeight)}</p>
//                     </div>
//                     <div className="list__separator">|</div>
//                     <div className="list__product-brand">
//                       <p>{product.brand}</p>
//                     </div>
//                   </div>
//                   <div className="discount-price">
//                     {product.price && product.price.discount && (
//                       <>{discountPriceFormat(product.price)}</>
//                     )}
//                   </div>
//                 </div>
//                 <div
//                   className="list__product-image"
//                   onClick={() => moveToPriceList(product.barcode)}
//                 >
//                   <Image barcode={product.barcode} />
//                 </div>
//               </div>

//               <div className="list__product-operations">
//                 <div
//                   id={`add-to-cart-${product.barcode}`}
//                   className="list__product-operations__confirm"
//                   onClick={(e) => {
//                     e.stopPropagation();
//                     updateAmount(product.barcode);
//                   }}
//                 >
//                   אישור
//                 </div>

//                 <div style={{ display: "flex", gap: "0.5rem" }}>
//                   {/* 1. פתיחת עריכה */}
//                   {selectedBarcode === null && (
//                     <button
//                       onClick={() => handleOpenBarcode(product.barcode)}
//                       style={{ backgroundColor: "green", color: "white" }}
//                     >
//                       צור/עדכן קבוצה
//                     </button>
//                   )}

//                   {/* 2. שמירה */}
//                   {selectedBarcode === product.barcode && (
//                     <button
//                       onClick={() => handleCloseBarcode(product.barcode)}
//                       style={{ backgroundColor: "blue", color: "white" }}
//                     >
//                       שמור שינויים
//                     </button>
//                   )}

//                   {/* 3. הוספה לרשימה */}
//                   {selectedBarcode !== null &&
//                     selectedBarcode !== product.barcode &&
//                     !groupData[selectedBarcode]?.includes(product.barcode) && (
//                       <button
//                         onClick={() => handleToggleAlternative(product.barcode)}
//                         style={{ backgroundColor: "green", color: "white" }}
//                       >
//                         הוסף לרשימה
//                       </button>
//                     )}

//                   {/* 4. הסרה מהרשימה */}
//                   {selectedBarcode !== null &&
//                     selectedBarcode !== product.barcode &&
//                     groupData[selectedBarcode]?.includes(product.barcode) && (
//                       <button
//                         onClick={() => handleToggleAlternative(product.barcode)}
//                         style={{ backgroundColor: "red", color: "white" }}
//                       >
//                         הסר מהרשימה
//                       </button>
//                     )}

//                                       {/* 6. כפתור "העתק רשימה" החדש */}
//                   {hasAlternativeProducts(product.barcode) &&
//                     selectedBarcode !== null &&
//                     selectedBarcode !== product.barcode && (
//                       <button
//                         onClick={() => handleCopyAndSave(product.barcode)}
//                         style={{ backgroundColor: "purple", color: "white" }}
//                       >
//                         העתק רשימה
//                       </button>
//                     )}

//                   {/* 5. הצג מוצרים חלופיים */}
//                   {selectedBarcode === product.barcode && (
//                     <button
//                       onClick={() => handleShowAlternatives(product.barcode)}
//                       style={{ backgroundColor: "orange", color: "white" }}
//                     >
//                       הצג מוצרים חלופיים
//                     </button>
//                   )}
//                 </div>
//               </div>
//             </div>
//           ))}
//         </div>
//       </div>

//       {/* כאן אנו שותלים את המודאל */}
//       <AlternativeProductsModal
//         isOpen={showModal}
//         onClose={() => setShowModal(false)}
//         barcodes={alternativesToShow}
//       />
//     </div>
//   );
// }

// export default ProductListManager;

import React, { useEffect, useRef, useState } from "react";
import { useProducts } from "../../context/ProductContext";
import { useCart } from "../../context/CartContext";
import "./ProductsListManager.css";
import { useNavigate } from "react-router";
import {
  updateProductInCart,
  addProductToCart,
  deleteProductFromCart,
} from "../../network/cartService";
import {
  getAllAlternativeProducts,
  getAlternativeProductByBarcode,
  createAlternativeProduct,
  updateAlternativeProductByBarcode,
} from "../../network/alternative-productsService";

import AlternativeProductsModal from "./AlternativeProductsModal";
import Image from "./Images";
import CategoryNavigation from "./CategoryNavigation";
import SubCategoryNavigation from "./SubCategoryNavigation";

/* -------------------------------- */
/* פונקציות עזר */
export const convertWeightUnit = (weightUnit) => {
  if (!weightUnit) return "";
  switch (weightUnit.toLowerCase()) {
    case "g":
      return "גרם";
    case "kg":
      return 'ק"ג';
    case "ml":
      return 'מ"ל';
    case "l":
      return "ליטר";
    case "u":
      return "יחידות";
    default:
      return weightUnit;
  }
};

const maxCharacters = (str, maxLen) => {
  if (!str) return "";
  return str.length > maxLen ? "..." + str.substring(0, maxLen - 3) : str;
};

const priceFormat = (price) => price.toFixed(2);

const discountPriceFormat = (price) => {
  const { units, totalPrice } = price.discount;
  return (
    <div
      className="list__discount-price"
      style={{
        display: "flex",
        flexDirection: "row-reverse",
        alignItems: "center",
        color: "#ff0000",
        fontWeight: "bold",
      }}
    >
      <p style={{ marginLeft: "0.3rem" }}>{units}</p>
      <p>{"יחידות ב"}</p>
      <p>{" - "}</p>
      <p>{priceFormat(totalPrice)}</p>
      <p style={{ fontWeight: "bold" }}>{"₪"}</p>
    </div>
  );
};

const makeInvisible = (button) => {
  button.classList.remove("visible");
};

const changeButtonToNoChangeAmountButton = (button) => {
  makeInvisible(button);
};

/* -------------------------------- */
/*          ProductListManager      */
/* -------------------------------- */
function ProductListManager() {
  const {
    products,
    allCategories,
    all_sub_categories,
    activeCategoryIndex,
    setActiveCategoryIndex,
    activeSubCategoryIndex,
    setActiveSubCategoryIndex,
  } = useProducts();

  const { getProductsAmountInCart, loadCart } = useCart();
  const nav = useNavigate();

  const [productAmounts, setProductAmounts] = useState({});
  const [oldProductAmounts, setOldProductAmounts] = useState({});
  const [isLoadData, setIsLoadData] = useState(false);

  //=================================================================================
  //               ניהול מוצרים חלופיים
  //=================================================================================
  // כאן נשמור את רשימת ה"alternativeProducts" שהגיעה מהשרת
  const [allAlternativeProducts, setAllAlternativeProducts] = useState([]);

  // הברקוד שנמצא במצב עריכה
  const [selectedBarcode, setSelectedBarcode] = useState(null);

  // מילון: { barcode -> arrayOfBarcodes[] }
  // כשבוחרים מוצר לעריכה, נטען/נעדכן אותו כאן
  const [groupData, setGroupData] = useState({});

  //-------------------------------------------------------------------------
  // טוען את כל נתוני ה־Alternative Products מהשרת:
  useEffect(() => {
    const loadAlternativeProducts = async () => {
      const result = await getAllAlternativeProducts();
      // לפי מה שהצגת בפוסטמן, המבנה הוא:
      // {
      //   "status": "success",
      //   "results": 17,
      //   "data": {
      //     "alternativeProducts": [ {barcode:..., alternatives: [...]}, ... ]
      //   }
      // }
      setAllAlternativeProducts(result.data.alternativeProducts || []);
    };
    loadAlternativeProducts();
  }, []);

  // פונקציה שבודקת אם למוצר יש רשימת חלופות ב- allAlternativeProducts
  const hasAlternativeProducts = (barcode) => {
    const alternativeProduct = allAlternativeProducts.find(
      (item) => item.barcode === barcode
    );
    return alternativeProduct && alternativeProduct.alternatives.length > 0;
  };

  // פונקציה שמעתיקה את רשימת החלופות מברקוד מסוים, ושומרת בשרת עבור selectedBarcode
  const handleCopyAndSave = async (sourceBarcode) => {
    try {
      const response = await getAlternativeProductByBarcode(sourceBarcode);
      // מניחים שבאמת יש פה איזה array
      const fromAlternatives = response.data.alternativeProduct.alternatives;

      // מעדכנים ב-state
      setGroupData((prev) => ({
        ...prev,
        [selectedBarcode]: fromAlternatives,
      }));

      // שומרים => יציאה ממצב עריכה
      // await handleCloseBarcode(selectedBarcode);
    } catch (error) {
      console.error("Error copying from source barcode:", error);
    }
  };

  // פותח עריכה למוצר מסוים
  const handleOpenBarcode = async (barcode) => {
    if (selectedBarcode === null) {
      setSelectedBarcode(barcode);
      try {
        const response = await getAlternativeProductByBarcode(barcode);
        if (response?.data?.alternativeProduct) {
          setGroupData({
            [barcode]: response.data.alternativeProduct.alternatives,
          });
        } else {
          setGroupData({ [barcode]: [] });
        }
      } catch (error) {
        console.error("Error fetching alternative product:", error);
        setGroupData({ [barcode]: [] });
      }
    }
  };

  // סגירת עריכה ושמירה
  const handleCloseBarcode = async (barcode) => {
    if (selectedBarcode === barcode) {
      try {
        const existingAlternative = await getAlternativeProductByBarcode(
          barcode
        );
        if (existingAlternative?.data?.alternativeProduct) {
          await updateAlternativeProductByBarcode(barcode, groupData[barcode]);
        } else {
          await createAlternativeProduct(barcode, groupData[barcode]);
        }
      } catch (error) {
        console.error("Error updating alternative product:", error);
      }
      // אפס מצב
      setSelectedBarcode(null);
      setGroupData({});
    }
  };

  // טוגגל הוספה/הסרה של ברקוד אל רשימת החלופות עבור selectedBarcode
  const handleToggleAlternative = (barcode) => {
    if (!selectedBarcode) return;
    setGroupData((prevData) => {
      const currentAlternatives = prevData[selectedBarcode] || [];
      if (currentAlternatives.includes(barcode)) {
        // הסר
        return {
          ...prevData,
          [selectedBarcode]: currentAlternatives.filter(
            (item) => item !== barcode
          ),
        };
      } else {
        // הוסף
        return {
          ...prevData,
          [selectedBarcode]: [...currentAlternatives, barcode],
        };
      }
    });
  };

  //=================================================================================
  //             ניהול המודאל של הצגת המוצרים החלופיים
  //=================================================================================
  const [showModal, setShowModal] = useState(false);
  const [alternativesToShow, setAlternativesToShow] = useState([]);

  const handleShowAlternatives = (barcode) => {
    const altBarcodes = groupData[barcode] || [];
    setAlternativesToShow(altBarcodes);
    setShowModal(true);
  };

  //=================================================================================
  //               ניהול כמות בסל והאנימציה של החלקה
  //=================================================================================
  const userId = "1";
  const [containerStyle, setContainerStyle] = useState({});

  const startTouch = useRef({ x: 0 });
  const swipeDirection = useRef(null);

  useEffect(() => {
    const loadAmounts = async () => {
      setIsLoadData(true);
      const amounts = await getProductsAmountInCart(userId);
      const amountsObject = {};
      amounts.cart.products.forEach((p) => {
        amountsObject[p.barcode] = p.amount;
      });
      setProductAmounts(amountsObject);
      setOldProductAmounts(amountsObject);
      setIsLoadData(false);
    };
    loadAmounts();
  }, [getProductsAmountInCart, userId]);

  if (isLoadData) {
    return <div>Loading Amounts...</div>;
  }

  const handleTouchStart = (event) => {
    swipeDirection.current = null;
    setContainerStyle({});
    startTouch.current.x = event.touches[0].clientX;
  };

  const handleTouchMove = (event) => {
    const moveX = event.touches[0].clientX;
    const deltaX = moveX - startTouch.current.x;
    if (Math.abs(deltaX) > 150) {
      swipeDirection.current = deltaX > 0 ? "right" : "left";
    }
  };

  const animateLeft = () => {
    setContainerStyle({ animation: "middleToLeft 0.2s ease" });
    setTimeout(() => {
      setContainerStyle({ animation: "leftToRight 1ms steps(1) forwards" });
    }, 200);
    setTimeout(() => {
      setContainerStyle({ animation: "rightToMiddle 0.3s ease" });
    }, 201);
  };

  const animateRight = () => {
    setContainerStyle({ animation: "middleToRight 0.2s ease" });
    setTimeout(() => {
      setContainerStyle({ animation: "rightToLeft 1ms steps(1) forwards" });
    }, 200);
    setTimeout(() => {
      setContainerStyle({ animation: "leftToMiddle 0.3s ease" });
    }, 201);
  };

  const handleTouchEnd = () => {
    const totalCategories = allCategories.length;
    const subCats = all_sub_categories[activeCategoryIndex] || [];
    const totalSubCats = subCats.length;

    if (swipeDirection.current === "right") {
      if (activeSubCategoryIndex > 0) {
        setActiveSubCategoryIndex(activeSubCategoryIndex - 1);
        animateRight();
      } else {
        const prevIndex =
          (activeCategoryIndex - 1 + totalCategories) % totalCategories;
        setActiveCategoryIndex(prevIndex);
        const prevSub = all_sub_categories[prevIndex] || [];
        setActiveSubCategoryIndex(prevSub.length ? prevSub.length - 1 : 0);
        animateRight();
      }
      window.scrollTo(0, 0);
    } else if (swipeDirection.current === "left") {
      if (activeSubCategoryIndex < totalSubCats - 1) {
        setActiveSubCategoryIndex(activeSubCategoryIndex + 1);
        animateLeft();
      } else {
        const nextIndex = (activeCategoryIndex + 1) % totalCategories;
        setActiveCategoryIndex(nextIndex);
        setActiveSubCategoryIndex(0);
        animateLeft();
      }
      window.scrollTo(0, 0);
    } else {
      setContainerStyle({});
    }
  };

  const moveToPriceList = (barcode) => {
    nav(`/priceList/${barcode}`);
  };

  const updateAmount = async (barcode) => {
    const amount = productAmounts[barcode] || 0;
    const button = document.querySelector(`#add-to-cart-${barcode}`);

    if (amount === 0) {
      changeButtonToNoChangeAmountButton(button);
      await deleteProductFromCart(userId, barcode);
      await loadCart(userId);
      setOldProductAmounts({ ...oldProductAmounts, [barcode]: 0 });
      return;
    }

    if (!oldProductAmounts[barcode]) {
      changeButtonToNoChangeAmountButton(button);
      await addProductToCart(userId, barcode, amount);
      await loadCart(userId);
      setOldProductAmounts({ ...oldProductAmounts, [barcode]: amount });
      return;
    }

    changeButtonToNoChangeAmountButton(button);
    await updateProductInCart(userId, barcode, amount);
    await loadCart(userId);
    setOldProductAmounts({ ...oldProductAmounts, [barcode]: amount });
  };

  // סינון מוצרים לפי הקטגוריה ותת־הקטגוריה הפעילות
  const currentCategory = allCategories[activeCategoryIndex];
  const subCats = all_sub_categories[activeCategoryIndex] || [];
  const currentSubCategory = subCats[activeSubCategoryIndex];

  const filteredProducts = products.filter((product) => {
    if (product.category !== currentCategory) return false;
    if (currentSubCategory) {
      return product.subcategory === currentSubCategory;
    }
    return true;
  });

  return (
    <div className="list__product-list">
      <CategoryNavigation />
      <SubCategoryNavigation />

      <div className="list__products-wrapper">
        <div
          className="list__products-container"
          style={containerStyle}
          onTouchStart={handleTouchStart}
          onTouchMove={handleTouchMove}
          onTouchEnd={handleTouchEnd}
        >
          {filteredProducts.map((product) => (
            <div className="list__product-card" key={product.barcode}>
              {product.price && product.price.discount && (
                <div className="list__product-badge">מבצע</div>
              )}

              <div className="list__product-details">
                <div className="list__product-data">
                  <div className="list__product-name">
                    <p>{maxCharacters(product.name, 23)}</p>
                  </div>
                  <div className="list__product-info">
                    <div className="list__product-weight">
                      <p>{product.weight}</p>
                      <p>{convertWeightUnit(product.unitWeight)}</p>
                    </div>
                    <div className="list__separator">|</div>
                    <div className="list__product-brand">
                      <p>{product.brand}</p>
                    </div>
                  </div>
                  <div className="discount-price">
                    {product.price && product.price.discount && (
                      <>{discountPriceFormat(product.price)}</>
                    )}
                  </div>
                </div>
                <div
                  className="list__product-image"
                  onClick={() => moveToPriceList(product.barcode)}
                >
                  <Image barcode={product.barcode} />
                </div>
              </div>

              <div className="list__product-operations">
                <div
                  id={`add-to-cart-${product.barcode}`}
                  className="list__product-operations__confirm"
                  onClick={(e) => {
                    e.stopPropagation();
                    updateAmount(product.barcode);
                  }}
                >
                  אישור
                </div>

                <div style={{ display: "flex", gap: "0.5rem" }}>
                  {/* 1. פתיחת עריכה (צור/עדכן קבוצה) */}
                  {selectedBarcode === null && (
                    <button
                      onClick={() => handleOpenBarcode(product.barcode)}
                      style={{ backgroundColor: "green", color: "white" }}
                    >
                      צור/עדכן קבוצה
                    </button>
                  )}

                  {/* 2. שמירה */}
                  {selectedBarcode === product.barcode && (
                    <button
                      onClick={() => handleCloseBarcode(product.barcode)}
                      style={{ backgroundColor: "blue", color: "white" }}
                    >
                      שמור שינויים
                    </button>
                  )}

                  {/* 3. הוספה לרשימה */}
                  {selectedBarcode !== null &&
                    selectedBarcode !== product.barcode &&
                    !groupData[selectedBarcode]?.includes(product.barcode) && (
                      <button
                        onClick={() => handleToggleAlternative(product.barcode)}
                        style={{ backgroundColor: "green", color: "white" }}
                      >
                        הוסף לרשימה
                      </button>
                    )}

                  {/* 4. הסרה מהרשימה */}
                  {selectedBarcode !== null &&
                    selectedBarcode !== product.barcode &&
                    groupData[selectedBarcode]?.includes(product.barcode) && (
                      <button
                        onClick={() => handleToggleAlternative(product.barcode)}
                        style={{ backgroundColor: "red", color: "white" }}
                      >
                        הסר מהרשימה
                      </button>
                    )}

                  {/* 6. כפתור "העתק רשימה" - יופיע רק אם יש חלופות + אנו בעריכה של מוצר אחר */}
                  {hasAlternativeProducts(product.barcode) &&
                    selectedBarcode !== null &&
                    selectedBarcode !== product.barcode && (
                      <button
                        onClick={() => handleCopyAndSave(product.barcode)}
                        style={{ backgroundColor: "purple", color: "white" }}
                      >
                        העתק רשימה
                      </button>
                    )}

                  {/* 5. הצג מוצרים חלופיים */}
                  {selectedBarcode === product.barcode && (
                    <button
                      onClick={() => handleShowAlternatives(product.barcode)}
                      style={{ backgroundColor: "orange", color: "white" }}
                    >
                      הצג מוצרים חלופיים
                    </button>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* מודאל להצגת רשימת מוצרים חלופיים */}
      <AlternativeProductsModal
        isOpen={showModal}
        onClose={() => setShowModal(false)}
        barcodes={alternativesToShow}
      />
    </div>
  );
}

export default ProductListManager;



ProductListManagerAlternativeProductsGroups.js:

import React, { useEffect, useState, useRef } from "react";
import {
  getAllAlternativeProductsGroups,
  getAlternativeProductsGroupsByBarcode,
  createAlternativeProductsGroups,
  updateAlternativeProductsGroupsByBarcode,
} from "../../network/alternativeProductsGroupsService";

import { useProducts } from "../../context/ProductContext";

// קומפוננטות ניווט
import CategoryNavigation from "./CategoryNavigation";
import SubCategoryNavigation from "./SubCategoryNavigation";

// תמונת מוצר
import Image from "./Images";

// מודאלים
import ModalAPGGroups from "./ModalAPGGroups";
import ModalShowGroups from "./ModalShowGroups";
import ModalCopyGroups from "./ModalCopyGroups";

// CSS
import "./ProductListManagerAlternativeProductsGroups.css";

/* -----------------------------------------------------------------
   פונקציות עזר
------------------------------------------------------------------ */
function findApgByBarcode(apgData, barcode) {
  return apgData.find((item) => item.barcode === barcode);
}

function getGroupsForBarcode(apgData, barcode) {
  const apg = findApgByBarcode(apgData, barcode);
  return apg ? apg.groups : [];
}

function addNewGroup(apgData, barcodeA, newGroupName) {
  const newData = JSON.parse(JSON.stringify(apgData));
  let apg = newData.find((item) => item.barcode === barcodeA);
  if (!apg) {
    newData.push({
      barcode: barcodeA,
      groups: [{ groupName: newGroupName, barcodes: [] }],
    });
    return newData;
  }
  const exists = apg.groups.find((g) => g.groupName === newGroupName);
  if (!exists) {
    apg.groups.push({ groupName: newGroupName, barcodes: [] });
  }
  return newData;
}

function addProductToGroup(apgData, barcodeA, groupName, barcodeB) {
  const newData = JSON.parse(JSON.stringify(apgData));
  const apgA = newData.find((item) => item.barcode === barcodeA);
  if (!apgA) return newData;
  const group = apgA.groups.find((g) => g.groupName === groupName);
  if (!group) return newData;

  if (!group.barcodes.includes(barcodeB)) {
    group.barcodes.push(barcodeB);
  }
  return newData;
}

function removeProductFromGroup(apgData, barcodeA, groupName, barcodeB) {
  const newData = JSON.parse(JSON.stringify(apgData));
  const apgA = newData.find((item) => item.barcode === barcodeA);
  if (!apgA) return newData;
  const group = apgA.groups.find((g) => g.groupName === groupName);
  if (!group) return newData;

  group.barcodes = group.barcodes.filter((b) => b !== barcodeB);
  return newData;
}

// העתקת כל הקבוצות ממוצר B ל-A
function copyAllGroupsFromBtoA(apgData, barcodeB, barcodeA) {
  const newData = JSON.parse(JSON.stringify(apgData));
  const apgB = findApgByBarcode(newData, barcodeB);
  if (!apgB) return newData;

  let apgA = findApgByBarcode(newData, barcodeA);
  if (!apgA) {
    newData.push({ barcode: barcodeA, groups: [] });
    apgA = findApgByBarcode(newData, barcodeA);
  }

  apgB.groups.forEach((groupOfB) => {
    const existing = apgA.groups.find(
      (g) => g.groupName === groupOfB.groupName
    );
    if (!existing) {
      apgA.groups.push({
        groupName: groupOfB.groupName,
        barcodes: [...groupOfB.barcodes],
      });
    } else {
      const setBarcodes = new Set([...existing.barcodes, ...groupOfB.barcodes]);
      existing.barcodes = Array.from(setBarcodes);
    }
  });

  return newData;
}

// העתקת קבוצה יחידה
function copySingleGroupFromBtoA(apgData, barcodeB, groupName, barcodeA) {
  const newData = JSON.parse(JSON.stringify(apgData));
  const apgB = findApgByBarcode(newData, barcodeB);
  if (!apgB) return newData;

  const groupB = apgB.groups.find((g) => g.groupName === groupName);
  if (!groupB) return newData;

  let apgA = findApgByBarcode(newData, barcodeA);
  if (!apgA) {
    newData.push({ barcode: barcodeA, groups: [] });
    apgA = findApgByBarcode(newData, barcodeA);
  }

  const existingGroup = apgA.groups.find((g) => g.groupName === groupName);
  if (!existingGroup) {
    apgA.groups.push({
      groupName,
      barcodes: [...groupB.barcodes],
    });
  } else {
    const setBarcodes = new Set([
      ...existingGroup.barcodes,
      ...groupB.barcodes,
    ]);
    existingGroup.barcodes = Array.from(setBarcodes);
  }

  return newData;
}

// פונקציה עזר להמרת יחידת משקל (אם תרצה להציג)
function convertWeightUnit(unit) {
  if (!unit) return "";
  switch (unit.toLowerCase()) {
    case "g":
      return "גרם";
    case "kg":
      return 'ק"ג';
    case "ml":
      return 'מ"ל';
    case "l":
      return "ליטר";
    default:
      return unit;
  }
}

// -------------------------------------------------------------
// הקומפוננטה הראשית
// -------------------------------------------------------------
function ProductListManagerAlternativeProductsGroups() {
  const {
    products,
    allCategories,
    all_sub_categories,
    activeCategoryIndex,
    setActiveCategoryIndex,
    activeSubCategoryIndex,
    setActiveSubCategoryIndex,
  } = useProducts();

  // שמירת apgData מהשרת
  const [apgData, setApgData] = useState([]);

  // מצבי עבודה
  const [mode, setMode] = useState("initial"); // 'initial' | 'editGroup' | 'copyAPG'
  const [activeA, setActiveA] = useState(null);
  const [activeGroupName, setActiveGroupName] = useState(null);

  // מודאלים
  const [showAPGGroupsModal, setShowAPGGroupsModal] = useState(false);
  const [showShowGroupsModal, setShowShowGroupsModal] = useState(false);
  const [showCopyGroupsModal, setShowCopyGroupsModal] = useState(false);

  // מקור לעתקת קבוצה B->A
  const [copySourceBarcodeB, setCopySourceBarcodeB] = useState(null);

  // -------------------------------------------------------------
  // טוען מהשרת את כל ה-APG בעת טעינת הקומפוננטה
  // -------------------------------------------------------------
  useEffect(() => {
    const fetchAPG = async () => {
      try {
        const res = await getAllAlternativeProductsGroups();
        setApgData(res?.data?.allGroups || []);
      } catch (err) {
        console.error("Error loading APG data:", err);
      }
    };
    fetchAPG();
  }, []);

  // -------------------------------------------------------------
  // 1) יצירת / עריכת APG
  // -------------------------------------------------------------
  const handleCreateEditAPG = (barcodeA) => {
    setActiveA(barcodeA);
    setMode("initial");
    setShowAPGGroupsModal(true);
  };

  const handleGroupSelected = (groupName) => {
    setActiveGroupName(groupName);
    setShowAPGGroupsModal(false);
    setMode("editGroup");
  };

  // -------------------------------------------------------------
  // 2) מצב editGroup: הוספת / הסרת מוצרים
  // -------------------------------------------------------------
  const handleAddToGroup = (barcodeB) => {
    const newApg = addProductToGroup(apgData, activeA, activeGroupName, barcodeB);
    setApgData(newApg);
  };

  const handleRemoveFromGroup = (barcodeB) => {
    const newApg = removeProductFromGroup(apgData, activeA, activeGroupName, barcodeB);
    setApgData(newApg);
  };

  // -------------------------------------------------------------
  // 3) כפתור "שמירת שינויים" -> שליחת עדכון לשרת
  // -------------------------------------------------------------
  const handleSaveChanges = async () => {
    if (!activeA) return;

    const apgOfA = findApgByBarcode(apgData, activeA);
    if (!apgOfA) {
      setMode("initial");
      setActiveA(null);
      setActiveGroupName(null);
      return;
    }

    try {
      const resGet = await getAlternativeProductsGroupsByBarcode(activeA);
      if (resGet?.data?.groupsByBarcode) {
        // כבר קיים בשרת
        await updateAlternativeProductsGroupsByBarcode(activeA, {
          groups: apgOfA.groups,
        });
      } else {
        // לא קיים -> יצירה
        await createAlternativeProductsGroups({
          barcode: activeA,
          groups: apgOfA.groups,
        });
      }
    } catch (err) {
      console.error("Error saving changes:", err);
    }

    setMode("initial");
    setActiveA(null);
    setActiveGroupName(null);
  };

  // -------------------------------------------------------------
  // 4) הצגת קבוצות
  // -------------------------------------------------------------
  const handleShowGroups = (barcodeA) => {
    setActiveA(barcodeA);
    setShowShowGroupsModal(true);
  };

  // -------------------------------------------------------------
  // 5) העתקת APG
  // -------------------------------------------------------------
  const handleCopyAPG = (barcodeA) => {
    setActiveA(barcodeA);
    setMode("copyAPG");
  };

  const handleCopyEntireAPG = (barcodeB) => {
    const newApg = copyAllGroupsFromBtoA(apgData, barcodeB, activeA);
    setApgData(newApg);
  };

  const handleOpenCopyGroupModal = (barcodeB) => {
    setCopySourceBarcodeB(barcodeB);
    setShowCopyGroupsModal(true);
  };

  const handleConfirmCopySingleGroup = (groupName) => {
    const newApg = copySingleGroupFromBtoA(apgData, copySourceBarcodeB, groupName, activeA);
    setApgData(newApg);
    setShowCopyGroupsModal(false);
  };

  // -------------------------------------------------------------
  // אנימציות החלקה בין קטגוריות/תתי קטגוריות
  // -------------------------------------------------------------
  const [containerStyle, setContainerStyle] = useState({});
  const startTouch = useRef({ x: 0 });
  const swipeDirection = useRef(null);

  const handleTouchStart = (event) => {
    swipeDirection.current = null;
    setContainerStyle({});
    startTouch.current.x = event.touches[0].clientX;
  };

  const handleTouchMove = (event) => {
    const moveX = event.touches[0].clientX;
    const deltaX = moveX - startTouch.current.x;
    if (Math.abs(deltaX) > 150) {
      swipeDirection.current = deltaX > 0 ? "right" : "left";
    }
  };

  const animateLeft = () => {
    setContainerStyle({ animation: "middleToLeft 0.2s ease" });
    setTimeout(() => {
      setContainerStyle({ animation: "leftToRight 1ms steps(1) forwards" });
    }, 200);
    setTimeout(() => {
      setContainerStyle({ animation: "rightToMiddle 0.3s ease" });
    }, 201);
  };

  const animateRight = () => {
    setContainerStyle({ animation: "middleToRight 0.2s ease" });
    setTimeout(() => {
      setContainerStyle({ animation: "rightToLeft 1ms steps(1) forwards" });
    }, 200);
    setTimeout(() => {
      setContainerStyle({ animation: "leftToMiddle 0.3s ease" });
    }, 201);
  };

  const handleTouchEnd = () => {
    const totalCats = allCategories.length;
    const subCats = all_sub_categories[activeCategoryIndex] || [];
    const totalSub = subCats.length;

    if (swipeDirection.current === "right") {
      if (activeSubCategoryIndex > 0) {
        setActiveSubCategoryIndex(activeSubCategoryIndex - 1);
        animateRight();
      } else {
        const prevIndex = (activeCategoryIndex - 1 + totalCats) % totalCats;
        setActiveCategoryIndex(prevIndex);

        const prevSub = all_sub_categories[prevIndex] || [];
        setActiveSubCategoryIndex(prevSub.length ? prevSub.length - 1 : 0);
        animateRight();
      }
      window.scrollTo(0, 0);
    } else if (swipeDirection.current === "left") {
      if (activeSubCategoryIndex < totalSub - 1) {
        setActiveSubCategoryIndex(activeSubCategoryIndex + 1);
        animateLeft();
      } else {
        const nextIndex = (activeCategoryIndex + 1) % totalCats;
        setActiveCategoryIndex(nextIndex);
        setActiveSubCategoryIndex(0);
        animateLeft();
      }
      window.scrollTo(0, 0);
    } else {
      setContainerStyle({});
    }
  };

  // -------------------------------------------------------------
  // סינון מוצרים לפי קטגוריה ותת-קטגוריה
  // -------------------------------------------------------------
  const currentCategory = allCategories[activeCategoryIndex];
  const subCats = all_sub_categories[activeCategoryIndex] || [];
  const currentSubCategory = subCats[activeSubCategoryIndex];

  const filteredProducts = products.filter((p) => {
    if (p.category !== currentCategory) return false;
    if (currentSubCategory) {
      return p.subcategory === currentSubCategory;
    }
    return true;
  });

  // -------------------------------------------------------------
  // עזר לזיהוי אם למוצר (B) יש APG
  // -------------------------------------------------------------
  const hasAPG = (barcodeB) => {
    const apgB = findApgByBarcode(apgData, barcodeB);
    return apgB && apgB.groups && apgB.groups.length > 0;
  };

  // האם מוצר B נמצא בקבוצה activeGroupName של activeA?
  const isInActiveGroup = (barcodeB) => {
    const apgA = findApgByBarcode(apgData, activeA);
    if (!apgA) return false;
    const group = apgA.groups.find((g) => g.groupName === activeGroupName);
    return group ? group.barcodes.includes(barcodeB) : false;
  };

  // פונקציה אופציונלית
  const moveToPriceList = (barcode) => {
    console.log("moveToPriceList:", barcode);
    // nav(`/priceList/${barcode}`);
  };

  // -------------------------------------------------------------
  // רינדור
  // -------------------------------------------------------------
  return (
    <div className="apg_products-wrapper">
      <CategoryNavigation />
      <SubCategoryNavigation />

      <div
        className="apg_products-container"
        style={containerStyle}
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
      >
        {filteredProducts.map((product) => {
          const barcode = product.barcode;

          // מצב initial + או copyAPG (אבל מדובר במוצר A עצמו)
          if (mode === "initial" || (mode === "copyAPG" && barcode === activeA)) {
            return (
              <div key={barcode} className="apg_product-card">
                {/* <div className="apg_product-badge">מבצע</div> אם תרצה */}

                {/* טקסט מימין */}
                <div className="apg_product-data">
                  <h3 className="apg_product-name">{product.name}</h3>
                  <div className="apg_product-info">
                    <p>{product.weight}</p>
                    <p>{convertWeightUnit(product.unitWeight)}</p>
                    <p className="apg_separator">|</p>
                    <p>{product.brand}</p>
                  </div>

                  {/* רק במצב initial מציגים כפתורי "יצירת/עריכה", "הצג", "העתקת APG" */}
                  {mode === "initial" && (
                    <div style={{ marginTop: "0.5rem" }}>
                      <button
                        onClick={() => handleCreateEditAPG(barcode)}
                        style={{
                          backgroundColor: "#008cba",
                          color: "#fff",
                          marginRight: "0.5rem",
                        }}
                      >
                        יצירת/עריכת APG
                      </button>
                      <button
                        onClick={() => handleShowGroups(barcode)}
                        style={{
                          backgroundColor: "#4caf50",
                          color: "#fff",
                          marginRight: "0.5rem",
                        }}
                      >
                        הצג קבוצות
                      </button>
                      <button
                        onClick={() => handleCopyAPG(barcode)}
                        style={{ backgroundColor: "#f0ad4e", color: "#fff" }}
                      >
                        העתקת APG
                      </button>
                    </div>
                  )}
                </div>

                {/* תמונה משמאל */}
                <div
                  className="apg_product-image"
                  onClick={() => moveToPriceList(barcode)}
                >
                  <Image barcode={barcode} />
                </div>
              </div>
            );
          }

          // מצב editGroup -> כפתורי הוספה/הסרה
          if (mode === "editGroup" && barcode !== activeA) {
            const inGroup = isInActiveGroup(barcode);
            return (
              <div key={barcode} className="apg_product-card">
                <div className="apg_product-data">
                  <h3 className="apg_product-name">{product.name}</h3>
                  <div className="apg_product-info">
                    <p>{product.weight}</p>
                    <p>{convertWeightUnit(product.unitWeight)}</p>
                    <p className="apg_separator">|</p>
                    <p>{product.brand}</p>
                  </div>
                  <div style={{ marginTop: "0.5rem" }}>
                    {inGroup ? (
                      <button
                        style={{ backgroundColor: "#f44336", color: "#fff" }}
                        onClick={() => handleRemoveFromGroup(barcode)}
                      >
                        הסר מהקבוצה
                      </button>
                    ) : (
                      <button
                        style={{ backgroundColor: "#4caf50", color: "#fff" }}
                        onClick={() => handleAddToGroup(barcode)}
                      >
                        הוסף לקבוצה
                      </button>
                    )}
                  </div>
                </div>
                <div className="apg_product-image">
                  <Image barcode={barcode} />
                </div>
              </div>
            );
          }

          // מצב copyAPG -> למוצרים שאינם A ויש להם APG
          if (mode === "copyAPG" && barcode !== activeA && hasAPG(barcode)) {
            return (
              <div key={barcode} className="apg_product-card">
                <div className="apg_product-data">
                  <h3 className="apg_product-name">{product.name}</h3>
                  <div className="apg_product-info">
                    <p>{product.weight}</p>
                    <p>{convertWeightUnit(product.unitWeight)}</p>
                    <p className="apg_separator">|</p>
                    <p>{product.brand}</p>
                  </div>
                  <div style={{ marginTop: "0.5rem" }}>
                    <button
                      style={{
                        backgroundColor: "#f0ad4e",
                        color: "#fff",
                        marginRight: "0.5rem",
                      }}
                      onClick={() => handleCopyEntireAPG(barcode)}
                    >
                      העתקת APG ממוצר זה
                    </button>
                    <button
                      style={{ backgroundColor: "#5bc0de", color: "#fff" }}
                      onClick={() => handleOpenCopyGroupModal(barcode)}
                    >
                      העתקת קבוצה
                    </button>
                  </div>
                </div>
                <div className="apg_product-image">
                  <Image barcode={barcode} />
                </div>
              </div>
            );
          }

          // מצב copyAPG -> אין APG
          if (mode === "copyAPG" && !hasAPG(barcode)) {
            return (
              <div key={barcode} className="apg_product-card">
                <div className="apg_product-data">
                  <h3 className="apg_product-name">{product.name}</h3>
                  <div className="apg_product-info">
                    <p>{product.weight}</p>
                    <p>{convertWeightUnit(product.unitWeight)}</p>
                    <p className="apg_separator">|</p>
                    <p>{product.brand}</p>
                  </div>
                  <p style={{ marginTop: "0.5rem", color: "#f00" }}>
                    אין APG למוצר זה
                  </p>
                </div>
                <div className="apg_product-image">
                  <Image barcode={barcode} />
                </div>
              </div>
            );
          }

          return null;
        })}
      </div>

      {/* כפתור "שמירת שינויים" כאשר mode = editGroup או copyAPG */}
      {(mode === "editGroup" || mode === "copyAPG") && activeA && (
        <button
          style={{
            marginTop: "1rem",
            backgroundColor: "#4caf50",
            color: "#fff",
            border: "none",
            padding: "0.6rem 1rem",
            borderRadius: "5px",
            cursor: "pointer",
          }}
          onClick={handleSaveChanges}
        >
          שמירת שינויים
        </button>
      )}

      {/* מודאל: יצירת/בחירת קבוצה */}
      {showAPGGroupsModal && (
        <ModalAPGGroups
          isOpen={showAPGGroupsModal}
          onClose={() => setShowAPGGroupsModal(false)}
          groups={getGroupsForBarcode(apgData, activeA)}
          onGroupSelected={handleGroupSelected}
          onCreateNewGroup={(groupName) => {
            const newData = addNewGroup(apgData, activeA, groupName);
            setApgData(newData);
            handleGroupSelected(groupName);
          }}
        />
      )}

      {/* מודאל: הצגת קבוצות + מחיקה */}
      {showShowGroupsModal && (
        <ModalShowGroups
          isOpen={showShowGroupsModal}
          apgData={apgData}
          setApgData={setApgData}
          barcodeA={activeA}
          // כשהמשתמש סוגר המודאל ללא אישור
          onCloseNoSave={() => {
            setShowShowGroupsModal(false);
            setMode("initial"); // חוזרים למצב התחלתי
          }}
          // כשהמשתמש אישר שמירת שינויים מקומי
          onApplyChanges={() => {
            setShowShowGroupsModal(false);
            setMode("editGroup"); // מציג כפתור שמירת שינויים
          }}
        />
      )}

      {/* מודאל: העתקת קבוצה ממוצר B */}
      {showCopyGroupsModal && (
        <ModalCopyGroups
          isOpen={showCopyGroupsModal}
          onClose={() => setShowCopyGroupsModal(false)}
          barcodeB={copySourceBarcodeB}
          apgData={apgData}
          onConfirmCopySingleGroup={handleConfirmCopySingleGroup}
        />
      )}
    </div>
  );
}

export default ProductListManagerAlternativeProductsGroups;



SubCategoryNavigation.js:

// import React, { useEffect, useRef } from 'react';
// import { useProducts } from '../../context/ProductContext';
// import './SubCategoryNavigation.css';

// export default function SubCategoryNavigation() {
//   const {
//     all_sub_categories,
//     activeCategoryIndex,
//     activeSubCategoryIndex,
//     setActiveSubCategoryIndex,
//   } = useProducts();

//   const navigationRef = useRef(null);

//   // המערך של תתי־הקטגוריות עבור הקטגוריה הפעילה
//   const subCats = all_sub_categories[activeCategoryIndex] || [];

//   const handleSubClick = (index) => {
//     setActiveSubCategoryIndex(index);
//     scrollToSub(index);
//   };

//   const scrollToSub = (index) => {
//     if (!navigationRef.current) return;
//     const element = navigationRef.current.children[index];
//     if (!element) return;
//     const containerWidth = navigationRef.current.clientWidth;
//     const scrollX =
//       element.offsetLeft - (containerWidth / 2 - element.clientWidth / 2);
//     navigationRef.current.scrollTo({ left: scrollX, behavior: 'smooth' });
//   };

//   useEffect(() => {
//     scrollToSub(activeSubCategoryIndex);
//   }, [activeSubCategoryIndex]);

//   // אם אין תתי־קטגוריות בכלל, לא נציג כלום
//   if (!subCats.length) return null;

//   return (
//     <div className="sub-navigation" ref={navigationRef}>
//       {subCats.map((subCat, index) => (
//         <div
//           key={index}
//           className={`sub-nav-topic ${
//             index === activeSubCategoryIndex ? 'active-sub-topic' : ''
//           }`}
//           onClick={() => handleSubClick(index)}
//         >
//           {subCat}
//           {index === activeSubCategoryIndex && (
//             <div className="sub-nav-underline" />
//           )}
//         </div>
//       ))}
//     </div>
//   );
// }

// SubCategoryNavigation.js

// SubCategoryNavigation.js
import React, { useEffect, useRef } from 'react';
import { useProducts } from '../../context/ProductContext';
import './SubCategoryNavigation.css';

/**
 * רכיב שמציג את התתי־קטגוריות של הקטגוריה הפעילה.
 * פס גלילה דומה, עם אפשרות ללחוץ ולעבור לתת־קטגוריה אחרת.
 */
export default function SubCategoryNavigation() {
  const {
    all_sub_categories,
    activeCategoryIndex,
    activeSubCategoryIndex,
    setActiveSubCategoryIndex,
  } = useProducts();

  const navigationRef = useRef(null);

  // מביאים את המערך של התתי־קטגוריות עבור הקטגוריה הפעילה
  const subCats = all_sub_categories[activeCategoryIndex] || [];

  const handleSubClick = (index) => {
    setActiveSubCategoryIndex(index);
    scrollToSub(index);
  };

  const scrollToSub = (index) => {
    if (!navigationRef.current) return;
    const element = navigationRef.current.children[index];
    if (!element) return;

    const containerWidth = navigationRef.current.clientWidth;
    const scrollX =
      element.offsetLeft - (containerWidth / 2 - element.clientWidth / 2);
    navigationRef.current.scrollTo({ left: scrollX, behavior: 'smooth' });
  };

  // בכל שינוי של תת־קטגוריה פעילה, לגלול אליה
  useEffect(() => {
    scrollToSub(activeSubCategoryIndex);
  }, [activeSubCategoryIndex]);

  // אם אין תתי-קטגוריות, לא מציגים כלום
  if (!subCats.length) return null;

  return (
    <div className="sub-navigation" ref={navigationRef}>
      {subCats.map((subCat, index) => (
        <div
          key={index}
          className={`sub-nav-topic ${
            index === activeSubCategoryIndex ? 'active-sub-topic' : ''
          }`}
          onClick={() => handleSubClick(index)}
        >
          {subCat}
          {index === activeSubCategoryIndex && (
            <div className="sub-nav-underline" />
          )}
        </div>
      ))}
    </div>
  );
}




images\products_images.js:

import Img111186 from "./images/111186.png";
import Img111353 from "./images/111353.png";
import Img111360 from "./images/111360.png";
...........................................................
import Img9019100676702 from "./images/9019100676702.png";
import Img9044400826861 from "./images/9044400826861.png";
import Img9044400851672 from "./images/9044400851672.png";
import Img90446269 from "./images/90446269.png";
import Img9120025839896 from "./images/9120025839896.png";
import Img9322969000015 from "./images/9322969000015.png";
import Img9800800056 from "./images/9800800056.png";

const getProductImage = (barcode) => {
  switch (barcode) {
    case "111186":
      return Img111186;
    case "111353":
      return Img111353;
    case "111360":
      return Img111360;
    case "111384":
      return Img111384;
    case "11210000094":
      return Img11210000094;
    case "144474":
      return Img144474;
    case "161358":
      return Img161358;
    case "18000701223":
      return Img18000701223;
    case "18000703494":
      return Img18000703494;
    case "1817377":
      return Img1817377;
    case "1817728":
      return Img1817728;
    case "211169":
      return Img211169;
    case "211312":
      return Img211312;
    case "211442":
      return Img211442;
    case "211985":
      return Img211985;
    case "25675301092":
      return Img25675301092;
    case "3029815":
...............................
    case "9800800056":
      return Img9800800056;
    default:
      return Img111353;
  }
};

const ProductsImages = ({ barcode }) => {
  return <img src={getProductImage(barcode)} alt="Product" />;
};

export default ProductsImages;



modals\ModalAddProduct.js:

// src/components/modals/ModalAddProduct.js
import React, { useState } from "react";
import Modal from "../../Cart/Modal"; // בהנחה שיש לך Modal מוכן (או כל ספריית מודאל)

export default function ModalAddProduct({ isOpen, onClose, onProductCreated }) {
  const [barcode, setBarcode] = useState("");
  const [name, setName] = useState("");
  const [brand, setBrand] = useState("");
  const [weight, setWeight] = useState(0);
  const [unitWeight, setUnitWeight] = useState("g");
  const [category, setCategory] = useState("");
  const [subcategory, setSubcategory] = useState("");
  const [generalName, setGeneralName] = useState("");

  if (!isOpen) return null;

  const handleCreate = () => {
    const newProd = {
      barcode,
      name,
      brand,
      weight: Number(weight),
      unitWeight,
      category,
      subcategory,
      generalName
    };
    onProductCreated(newProd);
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose}>
      <h2>הוספת מוצר חדש</h2>

      <div>
        <label>ברקוד:</label>
        <input value={barcode} onChange={(e) => setBarcode(e.target.value)} />
      </div>
      <div>
        <label>שם מוצר:</label>
        <input value={name} onChange={(e) => setName(e.target.value)} />
      </div>
      <div>
        <label>מותג:</label>
        <input value={brand} onChange={(e) => setBrand(e.target.value)} />
      </div>
      <div>
        <label>משקל:</label>
        <input
          type="number"
          value={weight}
          onChange={(e) => setWeight(e.target.value)}
        />
      </div>
      <div>
        <label>יחידת משקל:</label>
        <select value={unitWeight} onChange={(e) => setUnitWeight(e.target.value)}>
          <option value="g">גרם</option>
          <option value="kg">ק"ג</option>
          <option value="ml">מ"ל</option>
          <option value="l">ליטר</option>
          <option value="u">יחידות</option>
          <option value="t">אחר</option>
        </select>
      </div>
      <div>
        <label>קטגוריה:</label>
        <input value={category} onChange={(e) => setCategory(e.target.value)} />
      </div>
      <div>
        <label>תת־קטגוריה:</label>
        <input value={subcategory} onChange={(e) => setSubcategory(e.target.value)} />
      </div>
      <div>
        <label>שם כללי (generalName):</label>
        <input value={generalName} onChange={(e) => setGeneralName(e.target.value)} />
      </div>

      <button onClick={onClose}>בטל</button>
      <button onClick={handleCreate}>אישור</button>
    </Modal>
  );
}



modals\ModalBulkEdit.js:

// src/components/modals/ModalBulkEdit.js
import React, { useState } from "react";
import Modal from "../../Cart/Modal";

/** לשנות brand/weight/unitWeight/category/subcategory/generalName לכל המוצרים שנבחרו */
export default function ModalBulkEdit({
  isOpen,
  onClose,
  selectedBarcodes,
  onApply
}) {
  const [brand, setBrand] = useState("");
  const [weight, setWeight] = useState("");
  const [unitWeight, setUnitWeight] = useState("");
  const [category, setCategory] = useState("");
  const [subcategory, setSubcategory] = useState("");
  const [generalName, setGeneralName] = useState("");

  if (!isOpen) return null;

  const handleApply = () => {
    // נניח שהמשתמש לא חייב למלא את כל השדות
    // אנו שולחים רק את מה שמילא:
    const updates = {};
    if (brand.trim()) updates.brand = brand;
    if (weight.trim()) updates.weight = Number(weight);
    if (unitWeight.trim()) updates.unitWeight = unitWeight;
    if (category.trim()) updates.category = category;
    if (subcategory.trim()) updates.subcategory = subcategory;
    if (generalName.trim()) updates.generalName = generalName;

    onApply(updates);
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose}>
      <h2>עריכה מרובה</h2>
      <p>מוצרים שנבחרו: {selectedBarcodes.join(", ")}</p>

      <div>
        <label>מותג חדש:</label>
        <input value={brand} onChange={(e) => setBrand(e.target.value)} />
      </div>
      <div>
        <label>משקל חדש:</label>
        <input
          type="number"
          value={weight}
          onChange={(e) => setWeight(e.target.value)}
        />
      </div>
      <div>
        <label>יחידת משקל:</label>
        <select value={unitWeight} onChange={(e) => setUnitWeight(e.target.value)}>
          <option value="">(לא לשנות)</option>
          <option value="g">גרם</option>
          <option value="kg">ק"ג</option>
          <option value="ml">מ"ל</option>
          <option value="l">ליטר</option>
          <option value="u">יחידות</option>
          <option value="t">אחר</option>
        </select>
      </div>
      <div>
        <label>קטגוריה חדשה:</label>
        <input value={category} onChange={(e) => setCategory(e.target.value)} />
      </div>
      <div>
        <label>תת־קטגוריה חדשה:</label>
        <input value={subcategory} onChange={(e) => setSubcategory(e.target.value)} />
      </div>
      <div>
        <label>שם כללי חדש:</label>
        <input value={generalName} onChange={(e) => setGeneralName(e.target.value)} />
      </div>

      <div style={{ marginTop: "1rem" }}>
        <button onClick={onClose}>בטל</button>
        <button onClick={handleApply}>בצע עדכון</button>
      </div>
    </Modal>
  );
}



modals\ModalGlobalEdit.js:

// src/components/ManageProducts/ModalGlobalEdit.js
import React, { useState } from "react";
import Modal from "../../Cart/Modal";

export default function ModalGlobalEdit({ isOpen, onClose, onApplyChanges }) {
  const [newCategory, setNewCategory] = useState("");
  const [newSubcategory, setNewSubcategory] = useState("");
  // ... אולי שינוי מותג לכלל המוצרים

  if (!isOpen) return null;

  const handleApply = () => {
    // קוראים ל-onApplyChanges עם הנתונים
    onApplyChanges({ newCategory, newSubcategory /* ... */ });
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose}>
      <h2>עריכה כללית</h2>
      <div>
        <label>קטגוריה חדשה:</label>
        <input
          value={newCategory}
          onChange={(e) => setNewCategory(e.target.value)}
        />
      </div>
      <div>
        <label>תת־קטגוריה חדשה:</label>
        <input
          value={newSubcategory}
          onChange={(e) => setNewSubcategory(e.target.value)}
        />
      </div>
      {/* ... */}
      <button onClick={onClose}>בטל</button>
      <button onClick={handleApply}>אישור</button>
    </Modal>
  );
}



modals\ModalSingleEdit.js:

// src/components/modals/ModalSingleEdit.js
import React, { useState, useEffect } from "react";
import Modal from "../../Cart/Modal";

export default function ModalSingleEdit({ isOpen, onClose, product, onSave }) {
  const [barcode, setBarcode] = useState("");
  const [name, setName] = useState("");
  const [brand, setBrand] = useState("");
  const [weight, setWeight] = useState(0);
  const [unitWeight, setUnitWeight] = useState("g");
  const [category, setCategory] = useState("");
  const [subcategory, setSubcategory] = useState("");
  const [generalName, setGeneralName] = useState("");

  useEffect(() => {
    if (product && isOpen) {
      setBarcode(product.barcode || "");
      setName(product.name || "");
      setBrand(product.brand || "");
      setWeight(product.weight || 0);
      setUnitWeight(product.unitWeight || "g");
      setCategory(product.category || "");
      setSubcategory(product.subcategory || "");
      setGeneralName(product.generalName || "");
    }
  }, [product, isOpen]);

  if (!isOpen || !product) return null;

  const handleSave = () => {
    const updates = {
      barcode,
      name,
      brand,
      weight: Number(weight),
      unitWeight,
      category,
      subcategory,
      generalName
    };
    onSave(updates);
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose}>
      <h2>עריכת מוצר</h2>

      <div>
        <label>ברקוד:</label>
        <input value={barcode} onChange={(e) => setBarcode(e.target.value)} />
      </div>
      <div>
        <label>שם מוצר:</label>
        <input value={name} onChange={(e) => setName(e.target.value)} />
      </div>
      <div>
        <label>מותג:</label>
        <input value={brand} onChange={(e) => setBrand(e.target.value)} />
      </div>
      <div>
        <label>משקל:</label>
        <input
          type="number"
          value={weight}
          onChange={(e) => setWeight(e.target.value)}
        />
      </div>
      <div>
        <label>יחידת משקל:</label>
        <select value={unitWeight} onChange={(e) => setUnitWeight(e.target.value)}>
          <option value="g">גרם</option>
          <option value="kg">ק"ג</option>
          <option value="ml">מ"ל</option>
          <option value="l">ליטר</option>
          <option value="u">יחידות</option>
          <option value="t">אחר</option>
        </select>
      </div>
      <div>
        <label>קטגוריה:</label>
        <input value={category} onChange={(e) => setCategory(e.target.value)} />
      </div>
      <div>
        <label>תת־קטגוריה:</label>
        <input value={subcategory} onChange={(e) => setSubcategory(e.target.value)} />
      </div>
      <div>
        <label>שם כללי:</label>
        <input value={generalName} onChange={(e) => setGeneralName(e.target.value)} />
      </div>

      <button onClick={onClose}>בטל</button>
      <button onClick={handleSave}>שמור</button>
    </Modal>
  );
}



